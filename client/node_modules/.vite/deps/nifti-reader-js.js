import {
  __publicField
} from "./chunk-EWTE5DHJ.js";

// node_modules/fflate/esm/browser.js
var ch2 = {};
var wk = function(c, id, msg, transfer, cb) {
  var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
    c + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
  ], { type: "text/javascript" }))));
  w.onmessage = function(e) {
    var d = e.data, ed = d.$e$;
    if (ed) {
      var err2 = new Error(ed[0]);
      err2["code"] = ed[1];
      err2.stack = ed[2];
      cb(err2, null);
    } else
      cb(null, d);
  };
  w.postMessage(msg, transfer);
  return w;
};
var u8 = Uint8Array;
var u16 = Uint16Array;
var i32 = Int32Array;
var fleb = new u8([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var fdeb = new u8([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start) {
  var b = new u16(31);
  for (var i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  var r = new i32(b[30]);
  for (var i = 1; i < 30; ++i) {
    for (var j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return { b, r };
};
var _a = freb(fleb, 2);
var fl = _a.b;
var revfl = _a.r;
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0);
var fd = _b.b;
var revfd = _b.r;
var rev = new u16(32768);
for (i = 0; i < 32768; ++i) {
  x = (i & 43690) >> 1 | (i & 21845) << 1;
  x = (x & 52428) >> 2 | (x & 13107) << 2;
  x = (x & 61680) >> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
}
var x;
var i;
var hMap = function(cd, mb, r) {
  var s = cd.length;
  var i = 0;
  var l = new u16(mb);
  for (; i < s; ++i) {
    if (cd[i])
      ++l[cd[i] - 1];
  }
  var le = new u16(mb);
  for (i = 1; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }
  var co;
  if (r) {
    co = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        var sv = i << 4 | cd[i];
        var r_1 = mb - cd[i];
        var v = le[cd[i] - 1]++ << r_1;
        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
          co[rev[v] >> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
      }
    }
  }
  return co;
};
var flt = new u8(288);
for (i = 0; i < 144; ++i)
  flt[i] = 8;
var i;
for (i = 144; i < 256; ++i)
  flt[i] = 9;
var i;
for (i = 256; i < 280; ++i)
  flt[i] = 7;
var i;
for (i = 280; i < 288; ++i)
  flt[i] = 8;
var i;
var fdt = new u8(32);
for (i = 0; i < 32; ++i)
  fdt[i] = 5;
var i;
var flm = hMap(flt, 9, 0);
var flrm = hMap(flt, 9, 1);
var fdm = hMap(fdt, 5, 0);
var fdrm = hMap(fdt, 5, 1);
var max = function(a) {
  var m = a[0];
  for (var i = 1; i < a.length; ++i) {
    if (a[i] > m)
      m = a[i];
  }
  return m;
};
var bits = function(d, p, m) {
  var o = p / 8 | 0;
  return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
};
var bits16 = function(d, p) {
  var o = p / 8 | 0;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
};
var shft = function(p) {
  return (p + 7) / 8 | 0;
};
var slc = function(v, s, e) {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  return new u8(v.subarray(s, e));
};
var ec = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
  // determined by unknown compression method
];
var err = function(ind, msg, nt) {
  var e = new Error(msg || ec[ind]);
  e.code = ind;
  if (Error.captureStackTrace)
    Error.captureStackTrace(e, err);
  if (!nt)
    throw e;
  return e;
};
var inflt = function(dat, st, buf, dict) {
  var sl = dat.length, dl = dict ? dict.length : 0;
  if (!sl || st.f && !st.l)
    return buf || new u8(0);
  var noBuf = !buf;
  var resize = noBuf || st.i != 2;
  var noSt = st.i;
  if (noBuf)
    buf = new u8(sl * 3);
  var cbuf = function(l2) {
    var bl = buf.length;
    if (l2 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l2));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  var tbts = sl * 8;
  do {
    if (!lm) {
      final = bits(dat, pos, 1);
      var type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
        if (t > sl) {
          if (noSt)
            err(0);
          break;
        }
        if (resize)
          cbuf(bt + l);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l, st.p = pos = t * 8, st.f = final;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl);
        var clt = new u8(19);
        for (var i = 0; i < hcLen; ++i) {
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max(clt), clbmsk = (1 << clb) - 1;
        var clm = hMap(clt, clb, 1);
        for (var i = 0; i < tl; ) {
          var r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          var s = r >> 4;
          if (s < 16) {
            ldt[i++] = s;
          } else {
            var c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i++] = c;
          }
        }
        var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max(lt);
        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        err(1);
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
    }
    if (resize)
      cbuf(bt + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var lpos = pos;
    for (; ; lpos = pos) {
      var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
      pos += c & 15;
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
      if (!c)
        err(2);
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lpos = pos, lm = null;
        break;
      } else {
        var add = sym - 254;
        if (sym > 264) {
          var i = sym - 257, b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
        if (!d)
          err(3);
        pos += d & 15;
        var dt = fd[dsym];
        if (dsym > 3) {
          var b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (resize)
          cbuf(bt + 131072);
        var end = bt + add;
        if (bt < dt) {
          var shift = dl - dt, dend = Math.min(dt, end);
          if (shift + bt < 0)
            err(3);
          for (; bt < dend; ++bt)
            buf[bt] = dict[shift + bt];
        }
        for (; bt < end; ++bt)
          buf[bt] = buf[bt - dt];
      }
    }
    st.l = lm, st.p = lpos, st.b = bt, st.f = final;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
};
var wbits = function(d, p, v) {
  v <<= p & 7;
  var o = p / 8 | 0;
  d[o] |= v;
  d[o + 1] |= v >> 8;
};
var wbits16 = function(d, p, v) {
  v <<= p & 7;
  var o = p / 8 | 0;
  d[o] |= v;
  d[o + 1] |= v >> 8;
  d[o + 2] |= v >> 16;
};
var hTree = function(d, mb) {
  var t = [];
  for (var i = 0; i < d.length; ++i) {
    if (d[i])
      t.push({ s: i, f: d[i] });
  }
  var s = t.length;
  var t2 = t.slice();
  if (!s)
    return { t: et, l: 0 };
  if (s == 1) {
    var v = new u8(t[0].s + 1);
    v[t[0].s] = 1;
    return { t: v, l: 1 };
  }
  t.sort(function(a, b) {
    return a.f - b.f;
  });
  t.push({ s: -1, f: 25001 });
  var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
  t[0] = { s: -1, f: l.f + r.f, l, r };
  while (i1 != s - 1) {
    l = t[t[i0].f < t[i2].f ? i0++ : i2++];
    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
    t[i1++] = { s: -1, f: l.f + r.f, l, r };
  }
  var maxSym = t2[0].s;
  for (var i = 1; i < s; ++i) {
    if (t2[i].s > maxSym)
      maxSym = t2[i].s;
  }
  var tr = new u16(maxSym + 1);
  var mbt = ln(t[i1 - 1], tr, 0);
  if (mbt > mb) {
    var i = 0, dt = 0;
    var lft = mbt - mb, cst = 1 << lft;
    t2.sort(function(a, b) {
      return tr[b.s] - tr[a.s] || a.f - b.f;
    });
    for (; i < s; ++i) {
      var i2_1 = t2[i].s;
      if (tr[i2_1] > mb) {
        dt += cst - (1 << mbt - tr[i2_1]);
        tr[i2_1] = mb;
      } else
        break;
    }
    dt >>= lft;
    while (dt > 0) {
      var i2_2 = t2[i].s;
      if (tr[i2_2] < mb)
        dt -= 1 << mb - tr[i2_2]++ - 1;
      else
        ++i;
    }
    for (; i >= 0 && dt; --i) {
      var i2_3 = t2[i].s;
      if (tr[i2_3] == mb) {
        --tr[i2_3];
        ++dt;
      }
    }
    mbt = mb;
  }
  return { t: new u8(tr), l: mbt };
};
var ln = function(n, l, d) {
  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
var lc = function(c) {
  var s = c.length;
  while (s && !c[--s])
    ;
  var cl = new u16(++s);
  var cli = 0, cln = c[0], cls = 1;
  var w = function(v) {
    cl[cli++] = v;
  };
  for (var i = 1; i <= s; ++i) {
    if (c[i] == cln && i != s)
      ++cls;
    else {
      if (!cln && cls > 2) {
        for (; cls > 138; cls -= 138)
          w(32754);
        if (cls > 2) {
          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
          cls = 0;
        }
      } else if (cls > 3) {
        w(cln), --cls;
        for (; cls > 6; cls -= 6)
          w(8304);
        if (cls > 2)
          w(cls - 3 << 5 | 8208), cls = 0;
      }
      while (cls--)
        w(cln);
      cls = 1;
      cln = c[i];
    }
  }
  return { c: cl.subarray(0, cli), n: s };
};
var clen = function(cf, cl) {
  var l = 0;
  for (var i = 0; i < cl.length; ++i)
    l += cf[i] * cl[i];
  return l;
};
var wfblk = function(out, pos, dat) {
  var s = dat.length;
  var o = shft(pos + 2);
  out[o] = s & 255;
  out[o + 1] = s >> 8;
  out[o + 2] = out[o] ^ 255;
  out[o + 3] = out[o + 1] ^ 255;
  for (var i = 0; i < s; ++i)
    out[o + i + 4] = dat[i];
  return (o + 4 + s) * 8;
};
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
  wbits(out, p++, final);
  ++lf[256];
  var _a2 = hTree(lf, 15), dlt = _a2.t, mlb = _a2.l;
  var _b2 = hTree(df, 15), ddt = _b2.t, mdb = _b2.l;
  var _c = lc(dlt), lclt = _c.c, nlc = _c.n;
  var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;
  var lcfreq = new u16(19);
  for (var i = 0; i < lclt.length; ++i)
    ++lcfreq[lclt[i] & 31];
  for (var i = 0; i < lcdt.length; ++i)
    ++lcfreq[lcdt[i] & 31];
  var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;
  var nlcc = 19;
  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
    ;
  var flen = bl + 5 << 3;
  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];
  if (bs >= 0 && flen <= ftlen && flen <= dtlen)
    return wfblk(out, p, dat.subarray(bs, bs + bl));
  var lm, ll, dm, dl;
  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
  if (dtlen < ftlen) {
    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
    var llm = hMap(lct, mlcb, 0);
    wbits(out, p, nlc - 257);
    wbits(out, p + 5, ndc - 1);
    wbits(out, p + 10, nlcc - 4);
    p += 14;
    for (var i = 0; i < nlcc; ++i)
      wbits(out, p + 3 * i, lct[clim[i]]);
    p += 3 * nlcc;
    var lcts = [lclt, lcdt];
    for (var it = 0; it < 2; ++it) {
      var clct = lcts[it];
      for (var i = 0; i < clct.length; ++i) {
        var len = clct[i] & 31;
        wbits(out, p, llm[len]), p += lct[len];
        if (len > 15)
          wbits(out, p, clct[i] >> 5 & 127), p += clct[i] >> 12;
      }
    }
  } else {
    lm = flm, ll = flt, dm = fdm, dl = fdt;
  }
  for (var i = 0; i < li; ++i) {
    var sym = syms[i];
    if (sym > 255) {
      var len = sym >> 18 & 31;
      wbits16(out, p, lm[len + 257]), p += ll[len + 257];
      if (len > 7)
        wbits(out, p, sym >> 23 & 31), p += fleb[len];
      var dst = sym & 31;
      wbits16(out, p, dm[dst]), p += dl[dst];
      if (dst > 3)
        wbits16(out, p, sym >> 5 & 8191), p += fdeb[dst];
    } else {
      wbits16(out, p, lm[sym]), p += ll[sym];
    }
  }
  wbits16(out, p, lm[256]);
  return p + ll[256];
};
var deo = new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
var et = new u8(0);
var dflt = function(dat, lvl, plvl, pre, post, st) {
  var s = st.z || dat.length;
  var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7e3)) + post);
  var w = o.subarray(pre, o.length - post);
  var lst = st.l;
  var pos = (st.r || 0) & 7;
  if (lvl) {
    if (pos)
      w[0] = st.r >> 3;
    var opt = deo[lvl - 1];
    var n = opt >> 13, c = opt & 8191;
    var msk_1 = (1 << plvl) - 1;
    var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);
    var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
    var hsh = function(i2) {
      return (dat[i2] ^ dat[i2 + 1] << bs1_1 ^ dat[i2 + 2] << bs2_1) & msk_1;
    };
    var syms = new i32(25e3);
    var lf = new u16(288), df = new u16(32);
    var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;
    for (; i + 2 < s; ++i) {
      var hv = hsh(i);
      var imod = i & 32767, pimod = head[hv];
      prev[imod] = pimod;
      head[hv] = imod;
      if (wi <= i) {
        var rem = s - i;
        if ((lc_1 > 7e3 || li > 24576) && (rem > 423 || !lst)) {
          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
          li = lc_1 = eb = 0, bs = i;
          for (var j = 0; j < 286; ++j)
            lf[j] = 0;
          for (var j = 0; j < 30; ++j)
            df[j] = 0;
        }
        var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
        if (rem > 2 && hv == hsh(i - dif)) {
          var maxn = Math.min(n, rem) - 1;
          var maxd = Math.min(32767, i);
          var ml = Math.min(258, rem);
          while (dif <= maxd && --ch_1 && imod != pimod) {
            if (dat[i + l] == dat[i + l - dif]) {
              var nl = 0;
              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                ;
              if (nl > l) {
                l = nl, d = dif;
                if (nl > maxn)
                  break;
                var mmd = Math.min(dif, nl - 2);
                var md = 0;
                for (var j = 0; j < mmd; ++j) {
                  var ti = i - dif + j & 32767;
                  var pti = prev[ti];
                  var cd = ti - pti & 32767;
                  if (cd > md)
                    md = cd, pimod = ti;
                }
              }
            }
            imod = pimod, pimod = prev[imod];
            dif += imod - pimod & 32767;
          }
        }
        if (d) {
          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
          var lin = revfl[l] & 31, din = revfd[d] & 31;
          eb += fleb[lin] + fdeb[din];
          ++lf[257 + lin];
          ++df[din];
          wi = i + l;
          ++lc_1;
        } else {
          syms[li++] = dat[i];
          ++lf[dat[i]];
        }
      }
    }
    for (i = Math.max(i, wi); i < s; ++i) {
      syms[li++] = dat[i];
      ++lf[dat[i]];
    }
    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
    if (!lst) {
      st.r = pos & 7 | w[pos / 8 | 0] << 3;
      pos -= 7;
      st.h = head, st.p = prev, st.i = i, st.w = wi;
    }
  } else {
    for (var i = st.w || 0; i < s + lst; i += 65535) {
      var e = i + 65535;
      if (e >= s) {
        w[pos / 8 | 0] = lst;
        e = s;
      }
      pos = wfblk(w, pos + 1, dat.subarray(i, e));
    }
    st.i = s;
  }
  return slc(o, 0, pre + shft(pos) + post);
};
var crct = function() {
  var t = new Int32Array(256);
  for (var i = 0; i < 256; ++i) {
    var c = i, k = 9;
    while (--k)
      c = (c & 1 && -306674912) ^ c >>> 1;
    t[i] = c;
  }
  return t;
}();
var crc = function() {
  var c = -1;
  return {
    p: function(d) {
      var cr = c;
      for (var i = 0; i < d.length; ++i)
        cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
      c = cr;
    },
    d: function() {
      return ~c;
    }
  };
};
var adler = function() {
  var a = 1, b = 0;
  return {
    p: function(d) {
      var n = a, m = b;
      var l = d.length | 0;
      for (var i = 0; i != l; ) {
        var e = Math.min(i + 2655, l);
        for (; i < e; ++i)
          m += n += d[i];
        n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);
      }
      a = n, b = m;
    },
    d: function() {
      a %= 65521, b %= 65521;
      return (a & 255) << 24 | (a & 65280) << 8 | (b & 255) << 8 | b >> 8;
    }
  };
};
var dopt = function(dat, opt, pre, post, st) {
  if (!st) {
    st = { l: 1 };
    if (opt.dictionary) {
      var dict = opt.dictionary.subarray(-32768);
      var newDat = new u8(dict.length + dat.length);
      newDat.set(dict);
      newDat.set(dat, dict.length);
      dat = newDat;
      st.w = dict.length;
    }
  }
  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20 : 12 + opt.mem, pre, post, st);
};
var mrg = function(a, b) {
  var o = {};
  for (var k in a)
    o[k] = a[k];
  for (var k in b)
    o[k] = b[k];
  return o;
};
var wcln = function(fn, fnStr, td2) {
  var dt = fn();
  var st = fn.toString();
  var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/\s+/g, "").split(",");
  for (var i = 0; i < dt.length; ++i) {
    var v = dt[i], k = ks[i];
    if (typeof v == "function") {
      fnStr += ";" + k + "=";
      var st_1 = v.toString();
      if (v.prototype) {
        if (st_1.indexOf("[native code]") != -1) {
          var spInd = st_1.indexOf(" ", 8) + 1;
          fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
        } else {
          fnStr += st_1;
          for (var t in v.prototype)
            fnStr += ";" + k + ".prototype." + t + "=" + v.prototype[t].toString();
        }
      } else
        fnStr += st_1;
    } else
      td2[k] = v;
  }
  return fnStr;
};
var ch = [];
var cbfs = function(v) {
  var tl = [];
  for (var k in v) {
    if (v[k].buffer) {
      tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    }
  }
  return tl;
};
var wrkr = function(fns, init, id, cb) {
  if (!ch[id]) {
    var fnStr = "", td_1 = {}, m = fns.length - 1;
    for (var i = 0; i < m; ++i)
      fnStr = wcln(fns[i], fnStr, td_1);
    ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };
  }
  var td2 = mrg({}, ch[id].e);
  return wk(ch[id].c + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td2, cbfs(td2), cb);
};
var bInflt = function() {
  return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt];
};
var bDflt = function() {
  return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
};
var guze = function() {
  return [gzs, gzl];
};
var zule = function() {
  return [zls];
};
var pbf = function(msg) {
  return postMessage(msg, [msg.buffer]);
};
var gopt = function(o) {
  return o && {
    out: o.size && new u8(o.size),
    dictionary: o.dictionary
  };
};
var astrm = function(strm) {
  strm.ondata = function(dat, final) {
    return postMessage([dat, final], [dat.buffer]);
  };
  return function(ev) {
    if (ev.data.length) {
      strm.push(ev.data[0], ev.data[1]);
      postMessage([ev.data[0].length]);
    } else
      strm.flush();
  };
};
var astrmify = function(fns, strm, opts, init, id, flush, ext) {
  var t;
  var w = wrkr(fns, init, id, function(err2, dat) {
    if (err2)
      w.terminate(), strm.ondata.call(strm, err2);
    else if (!Array.isArray(dat))
      ext(dat);
    else if (dat.length == 1) {
      strm.queuedSize -= dat[0];
      if (strm.ondrain)
        strm.ondrain(dat[0]);
    } else {
      if (dat[1])
        w.terminate();
      strm.ondata.call(strm, err2, dat[0], dat[1]);
    }
  });
  w.postMessage(opts);
  strm.queuedSize = 0;
  strm.push = function(d, f) {
    if (!strm.ondata)
      err(5);
    if (t)
      strm.ondata(err(4, 0, 1), null, !!f);
    strm.queuedSize += d.length;
    w.postMessage([d, t = f], [d.buffer]);
  };
  strm.terminate = function() {
    w.terminate();
  };
  if (flush) {
    strm.flush = function() {
      w.postMessage([]);
    };
  }
};
var b2 = function(d, b) {
  return d[b] | d[b + 1] << 8;
};
var b4 = function(d, b) {
  return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
};
var b8 = function(d, b) {
  return b4(d, b) + b4(d, b + 4) * 4294967296;
};
var wbytes = function(d, b, v) {
  for (; v; ++b)
    d[b] = v, v >>>= 8;
};
var gzh = function(c, o) {
  var fn = o.filename;
  c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3;
  if (o.mtime != 0)
    wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1e3));
  if (fn) {
    c[3] = 8;
    for (var i = 0; i <= fn.length; ++i)
      c[i + 10] = fn.charCodeAt(i);
  }
};
var gzs = function(d) {
  if (d[0] != 31 || d[1] != 139 || d[2] != 8)
    err(6, "invalid gzip data");
  var flg = d[3];
  var st = 10;
  if (flg & 4)
    st += (d[10] | d[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
    ;
  return st + (flg & 2);
};
var gzl = function(d) {
  var l = d.length;
  return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;
};
var gzhl = function(o) {
  return 10 + (o.filename ? o.filename.length + 1 : 0);
};
var zlh = function(c, o) {
  var lv = o.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
  c[0] = 120, c[1] = fl2 << 6 | (o.dictionary && 32);
  c[1] |= 31 - (c[0] << 8 | c[1]) % 31;
  if (o.dictionary) {
    var h = adler();
    h.p(o.dictionary);
    wbytes(c, 2, h.d());
  }
};
var zls = function(d, dict) {
  if ((d[0] & 15) != 8 || d[0] >> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    err(6, "invalid zlib data");
  if ((d[1] >> 5 & 1) == +!dict)
    err(6, "invalid zlib data: " + (d[1] & 32 ? "need" : "unexpected") + " dictionary");
  return (d[1] >> 3 & 4) + 2;
};
function StrmOpt(opts, cb) {
  if (typeof opts == "function")
    cb = opts, opts = {};
  this.ondata = cb;
  return opts;
}
var Deflate = function() {
  function Deflate2(opts, cb) {
    if (typeof opts == "function")
      cb = opts, opts = {};
    this.ondata = cb;
    this.o = opts || {};
    this.s = { l: 0, i: 32768, w: 32768, z: 32768 };
    this.b = new u8(98304);
    if (this.o.dictionary) {
      var dict = this.o.dictionary.subarray(-32768);
      this.b.set(dict, 32768 - dict.length);
      this.s.i = 32768 - dict.length;
    }
  }
  Deflate2.prototype.p = function(c, f) {
    this.ondata(dopt(c, this.o, 0, 0, this.s), f);
  };
  Deflate2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (this.s.l)
      err(4);
    var endLen = chunk.length + this.s.z;
    if (endLen > this.b.length) {
      if (endLen > 2 * this.b.length - 32768) {
        var newBuf = new u8(endLen & -32768);
        newBuf.set(this.b.subarray(0, this.s.z));
        this.b = newBuf;
      }
      var split = this.b.length - this.s.z;
      this.b.set(chunk.subarray(0, split), this.s.z);
      this.s.z = this.b.length;
      this.p(this.b, false);
      this.b.set(this.b.subarray(-32768));
      this.b.set(chunk.subarray(split), 32768);
      this.s.z = chunk.length - split + 32768;
      this.s.i = 32766, this.s.w = 32768;
    } else {
      this.b.set(chunk, this.s.z);
      this.s.z += chunk.length;
    }
    this.s.l = final & 1;
    if (this.s.z > this.s.w + 8191 || final) {
      this.p(this.b, final || false);
      this.s.w = this.s.i, this.s.i -= 2;
    }
  };
  Deflate2.prototype.flush = function() {
    if (!this.ondata)
      err(5);
    if (this.s.l)
      err(4);
    this.p(this.b, false);
    this.s.w = this.s.i, this.s.i -= 2;
  };
  return Deflate2;
}();
var AsyncDeflate = /* @__PURE__ */ function() {
  function AsyncDeflate2(opts, cb) {
    astrmify([
      bDflt,
      function() {
        return [astrm, Deflate];
      }
    ], this, StrmOpt.call(this, opts, cb), function(ev) {
      var strm = new Deflate(ev.data);
      onmessage = astrm(strm);
    }, 6, 1);
  }
  return AsyncDeflate2;
}();
function deflateSync(data, opts) {
  return dopt(data, opts || {}, 0, 0);
}
var Inflate = function() {
  function Inflate2(opts, cb) {
    if (typeof opts == "function")
      cb = opts, opts = {};
    this.ondata = cb;
    var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
    this.s = { i: 0, b: dict ? dict.length : 0 };
    this.o = new u8(32768);
    this.p = new u8(0);
    if (dict)
      this.o.set(dict);
  }
  Inflate2.prototype.e = function(c) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    if (!this.p.length)
      this.p = c;
    else if (c.length) {
      var n = new u8(this.p.length + c.length);
      n.set(this.p), n.set(c, this.p.length), this.p = n;
    }
  };
  Inflate2.prototype.c = function(final) {
    this.s.i = +(this.d = final || false);
    var bts = this.s.b;
    var dt = inflt(this.p, this.s, this.o);
    this.ondata(slc(dt, bts, this.s.b), this.d);
    this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
  };
  Inflate2.prototype.push = function(chunk, final) {
    this.e(chunk), this.c(final);
  };
  return Inflate2;
}();
var AsyncInflate = /* @__PURE__ */ function() {
  function AsyncInflate2(opts, cb) {
    astrmify([
      bInflt,
      function() {
        return [astrm, Inflate];
      }
    ], this, StrmOpt.call(this, opts, cb), function(ev) {
      var strm = new Inflate(ev.data);
      onmessage = astrm(strm);
    }, 7, 0);
  }
  return AsyncInflate2;
}();
function inflateSync(data, opts) {
  return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
var Gzip = function() {
  function Gzip2(opts, cb) {
    this.c = crc();
    this.l = 0;
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  Gzip2.prototype.push = function(chunk, final) {
    this.c.p(chunk);
    this.l += chunk.length;
    Deflate.prototype.push.call(this, chunk, final);
  };
  Gzip2.prototype.p = function(c, f) {
    var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);
    if (this.v)
      gzh(raw, this.o), this.v = 0;
    if (f)
      wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
    this.ondata(raw, f);
  };
  Gzip2.prototype.flush = function() {
    Deflate.prototype.flush.call(this);
  };
  return Gzip2;
}();
var Gunzip = function() {
  function Gunzip2(opts, cb) {
    this.v = 1;
    this.r = 0;
    Inflate.call(this, opts, cb);
  }
  Gunzip2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    this.r += chunk.length;
    if (this.v) {
      var p = this.p.subarray(this.v - 1);
      var s = p.length > 3 ? gzs(p) : 4;
      if (s > p.length) {
        if (!final)
          return;
      } else if (this.v > 1 && this.onmember) {
        this.onmember(this.r - p.length);
      }
      this.p = p.subarray(s), this.v = 0;
    }
    Inflate.prototype.c.call(this, final);
    if (this.s.f && !this.s.l && !final) {
      this.v = shft(this.s.p) + 9;
      this.s = { i: 0 };
      this.o = new u8(0);
      this.push(new u8(0), final);
    }
  };
  return Gunzip2;
}();
var AsyncGunzip = /* @__PURE__ */ function() {
  function AsyncGunzip2(opts, cb) {
    var _this = this;
    astrmify([
      bInflt,
      guze,
      function() {
        return [astrm, Inflate, Gunzip];
      }
    ], this, StrmOpt.call(this, opts, cb), function(ev) {
      var strm = new Gunzip(ev.data);
      strm.onmember = function(offset) {
        return postMessage(offset);
      };
      onmessage = astrm(strm);
    }, 9, 0, function(offset) {
      return _this.onmember && _this.onmember(offset);
    });
  }
  return AsyncGunzip2;
}();
function gunzipSync(data, opts) {
  var st = gzs(data);
  if (st + 8 > data.length)
    err(6, "invalid gzip data");
  return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);
}
var Zlib = function() {
  function Zlib2(opts, cb) {
    this.c = adler();
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  Zlib2.prototype.push = function(chunk, final) {
    this.c.p(chunk);
    Deflate.prototype.push.call(this, chunk, final);
  };
  Zlib2.prototype.p = function(c, f) {
    var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);
    if (this.v)
      zlh(raw, this.o), this.v = 0;
    if (f)
      wbytes(raw, raw.length - 4, this.c.d());
    this.ondata(raw, f);
  };
  Zlib2.prototype.flush = function() {
    Deflate.prototype.flush.call(this);
  };
  return Zlib2;
}();
var Unzlib = function() {
  function Unzlib2(opts, cb) {
    Inflate.call(this, opts, cb);
    this.v = opts && opts.dictionary ? 2 : 1;
  }
  Unzlib2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      if (this.p.length < 6 && !final)
        return;
      this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;
    }
    if (final) {
      if (this.p.length < 4)
        err(6, "invalid zlib data");
      this.p = this.p.subarray(0, -4);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Unzlib2;
}();
var AsyncUnzlib = /* @__PURE__ */ function() {
  function AsyncUnzlib2(opts, cb) {
    astrmify([
      bInflt,
      zule,
      function() {
        return [astrm, Inflate, Unzlib];
      }
    ], this, StrmOpt.call(this, opts, cb), function(ev) {
      var strm = new Unzlib(ev.data);
      onmessage = astrm(strm);
    }, 11, 0);
  }
  return AsyncUnzlib2;
}();
function unzlibSync(data, opts) {
  return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
var Decompress = function() {
  function Decompress2(opts, cb) {
    this.o = StrmOpt.call(this, opts, cb) || {};
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
  }
  Decompress2.prototype.i = function() {
    var _this = this;
    this.s.ondata = function(dat, final) {
      _this.ondata(dat, final);
    };
  };
  Decompress2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (!this.s) {
      if (this.p && this.p.length) {
        var n = new u8(this.p.length + chunk.length);
        n.set(this.p), n.set(chunk, this.p.length);
      } else
        this.p = chunk;
      if (this.p.length > 2) {
        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(this.o) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(this.o) : new this.Z(this.o);
        this.i();
        this.s.push(this.p, final);
        this.p = null;
      }
    } else
      this.s.push(chunk, final);
  };
  return Decompress2;
}();
var AsyncDecompress = function() {
  function AsyncDecompress2(opts, cb) {
    Decompress.call(this, opts, cb);
    this.queuedSize = 0;
    this.G = AsyncGunzip;
    this.I = AsyncInflate;
    this.Z = AsyncUnzlib;
  }
  AsyncDecompress2.prototype.i = function() {
    var _this = this;
    this.s.ondata = function(err2, dat, final) {
      _this.ondata(err2, dat, final);
    };
    this.s.ondrain = function(size) {
      _this.queuedSize -= size;
      if (_this.ondrain)
        _this.ondrain(size);
    };
  };
  AsyncDecompress2.prototype.push = function(chunk, final) {
    this.queuedSize += chunk.length;
    Decompress.prototype.push.call(this, chunk, final);
  };
  return AsyncDecompress2;
}();
function decompressSync(data, opts) {
  return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, opts) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, opts) : unzlibSync(data, opts);
}
var te = typeof TextEncoder != "undefined" && new TextEncoder();
var td = typeof TextDecoder != "undefined" && new TextDecoder();
var tds = 0;
try {
  td.decode(et, { stream: true });
  tds = 1;
} catch (e) {
}
var dutf8 = function(d) {
  for (var r = "", i = 0; ; ) {
    var c = d[i++];
    var eb = (c > 127) + (c > 223) + (c > 239);
    if (i + eb > d.length)
      return { s: r, r: slc(d, i - 1) };
    if (!eb)
      r += String.fromCharCode(c);
    else if (eb == 3) {
      c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | d[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
    } else if (eb & 1)
      r += String.fromCharCode((c & 31) << 6 | d[i++] & 63);
    else
      r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | d[i++] & 63);
  }
};
var DecodeUTF8 = function() {
  function DecodeUTF82(cb) {
    this.ondata = cb;
    if (tds)
      this.t = new TextDecoder();
    else
      this.p = et;
  }
  DecodeUTF82.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    final = !!final;
    if (this.t) {
      this.ondata(this.t.decode(chunk, { stream: true }), final);
      if (final) {
        if (this.t.decode().length)
          err(8);
        this.t = null;
      }
      return;
    }
    if (!this.p)
      err(4);
    var dat = new u8(this.p.length + chunk.length);
    dat.set(this.p);
    dat.set(chunk, this.p.length);
    var _a2 = dutf8(dat), s = _a2.s, r = _a2.r;
    if (final) {
      if (r.length)
        err(8);
      this.p = null;
    } else
      this.p = r;
    this.ondata(s, final);
  };
  return DecodeUTF82;
}();
var EncodeUTF8 = function() {
  function EncodeUTF82(cb) {
    this.ondata = cb;
  }
  EncodeUTF82.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    this.ondata(strToU8(chunk), this.d = final || false);
  };
  return EncodeUTF82;
}();
function strToU8(str, latin1) {
  if (latin1) {
    var ar_1 = new u8(str.length);
    for (var i = 0; i < str.length; ++i)
      ar_1[i] = str.charCodeAt(i);
    return ar_1;
  }
  if (te)
    return te.encode(str);
  var l = str.length;
  var ar = new u8(str.length + (str.length >> 1));
  var ai = 0;
  var w = function(v) {
    ar[ai++] = v;
  };
  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }
    var c = str.charCodeAt(i);
    if (c < 128 || latin1)
      w(c);
    else if (c < 2048)
      w(192 | c >> 6), w(128 | c & 63);
    else if (c > 55295 && c < 57344)
      c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);
    else
      w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);
  }
  return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
  if (latin1) {
    var r = "";
    for (var i = 0; i < dat.length; i += 16384)
      r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));
    return r;
  } else if (td) {
    return td.decode(dat);
  } else {
    var _a2 = dutf8(dat), s = _a2.s, r = _a2.r;
    if (r.length)
      err(8);
    return s;
  }
}
var dbf = function(l) {
  return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;
};
var z64e = function(d, b) {
  for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
    ;
  return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];
};
var exfl = function(ex) {
  var le = 0;
  if (ex) {
    for (var k in ex) {
      var l = ex[k].length;
      if (l > 65535)
        err(9);
      le += l + 4;
    }
  }
  return le;
};
var wzh = function(d, b, f, fn, u, c, ce, co) {
  var fl2 = fn.length, ex = f.extra, col = co && co.length;
  var exl = exfl(ex);
  wbytes(d, b, ce != null ? 33639248 : 67324752), b += 4;
  if (ce != null)
    d[b++] = 20, d[b++] = f.os;
  d[b] = 20, b += 2;
  d[b++] = f.flag << 1 | (c < 0 && 8), d[b++] = u && 8;
  d[b++] = f.compression & 255, d[b++] = f.compression >> 8;
  var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;
  if (y < 0 || y > 119)
    err(10);
  wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >> 1), b += 4;
  if (c != -1) {
    wbytes(d, b, f.crc);
    wbytes(d, b + 4, c < 0 ? -c - 2 : c);
    wbytes(d, b + 8, f.size);
  }
  wbytes(d, b + 12, fl2);
  wbytes(d, b + 14, exl), b += 16;
  if (ce != null) {
    wbytes(d, b, col);
    wbytes(d, b + 6, f.attrs);
    wbytes(d, b + 10, ce), b += 14;
  }
  d.set(fn, b);
  b += fl2;
  if (exl) {
    for (var k in ex) {
      var exf = ex[k], l = exf.length;
      wbytes(d, b, +k);
      wbytes(d, b + 2, l);
      d.set(exf, b + 4), b += 4 + l;
    }
  }
  if (col)
    d.set(co, b), b += col;
  return b;
};
var wzf = function(o, b, c, d, e) {
  wbytes(o, b, 101010256);
  wbytes(o, b + 8, c);
  wbytes(o, b + 10, c);
  wbytes(o, b + 12, d);
  wbytes(o, b + 16, e);
};
var ZipPassThrough = function() {
  function ZipPassThrough2(filename) {
    this.filename = filename;
    this.c = crc();
    this.size = 0;
    this.compression = 0;
  }
  ZipPassThrough2.prototype.process = function(chunk, final) {
    this.ondata(null, chunk, final);
  };
  ZipPassThrough2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    this.c.p(chunk);
    this.size += chunk.length;
    if (final)
      this.crc = this.c.d();
    this.process(chunk, final || false);
  };
  return ZipPassThrough2;
}();
var ZipDeflate = function() {
  function ZipDeflate2(filename, opts) {
    var _this = this;
    if (!opts)
      opts = {};
    ZipPassThrough.call(this, filename);
    this.d = new Deflate(opts, function(dat, final) {
      _this.ondata(null, dat, final);
    });
    this.compression = 8;
    this.flag = dbf(opts.level);
  }
  ZipDeflate2.prototype.process = function(chunk, final) {
    try {
      this.d.push(chunk, final);
    } catch (e) {
      this.ondata(e, null, final);
    }
  };
  ZipDeflate2.prototype.push = function(chunk, final) {
    ZipPassThrough.prototype.push.call(this, chunk, final);
  };
  return ZipDeflate2;
}();
var AsyncZipDeflate = function() {
  function AsyncZipDeflate2(filename, opts) {
    var _this = this;
    if (!opts)
      opts = {};
    ZipPassThrough.call(this, filename);
    this.d = new AsyncDeflate(opts, function(err2, dat, final) {
      _this.ondata(err2, dat, final);
    });
    this.compression = 8;
    this.flag = dbf(opts.level);
    this.terminate = this.d.terminate;
  }
  AsyncZipDeflate2.prototype.process = function(chunk, final) {
    this.d.push(chunk, final);
  };
  AsyncZipDeflate2.prototype.push = function(chunk, final) {
    ZipPassThrough.prototype.push.call(this, chunk, final);
  };
  return AsyncZipDeflate2;
}();
var Zip = function() {
  function Zip2(cb) {
    this.ondata = cb;
    this.u = [];
    this.d = 1;
  }
  Zip2.prototype.add = function(file) {
    var _this = this;
    if (!this.ondata)
      err(5);
    if (this.d & 2)
      this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);
    else {
      var f = strToU8(file.filename), fl_1 = f.length;
      var com = file.comment, o = com && strToU8(com);
      var u = fl_1 != file.filename.length || o && com.length != o.length;
      var hl_1 = fl_1 + exfl(file.extra) + 30;
      if (fl_1 > 65535)
        this.ondata(err(11, 0, 1), null, false);
      var header = new u8(hl_1);
      wzh(header, 0, file, f, u, -1);
      var chks_1 = [header];
      var pAll_1 = function() {
        for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {
          var chk = chks_2[_i];
          _this.ondata(null, chk, false);
        }
        chks_1 = [];
      };
      var tr_1 = this.d;
      this.d = 0;
      var ind_1 = this.u.length;
      var uf_1 = mrg(file, {
        f,
        u,
        o,
        t: function() {
          if (file.terminate)
            file.terminate();
        },
        r: function() {
          pAll_1();
          if (tr_1) {
            var nxt = _this.u[ind_1 + 1];
            if (nxt)
              nxt.r();
            else
              _this.d = 1;
          }
          tr_1 = 1;
        }
      });
      var cl_1 = 0;
      file.ondata = function(err2, dat, final) {
        if (err2) {
          _this.ondata(err2, dat, final);
          _this.terminate();
        } else {
          cl_1 += dat.length;
          chks_1.push(dat);
          if (final) {
            var dd = new u8(16);
            wbytes(dd, 0, 134695760);
            wbytes(dd, 4, file.crc);
            wbytes(dd, 8, cl_1);
            wbytes(dd, 12, file.size);
            chks_1.push(dd);
            uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;
            if (tr_1)
              uf_1.r();
            tr_1 = 1;
          } else if (tr_1)
            pAll_1();
        }
      };
      this.u.push(uf_1);
    }
  };
  Zip2.prototype.end = function() {
    var _this = this;
    if (this.d & 2) {
      this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);
      return;
    }
    if (this.d)
      this.e();
    else
      this.u.push({
        r: function() {
          if (!(_this.d & 1))
            return;
          _this.u.splice(-1, 1);
          _this.e();
        },
        t: function() {
        }
      });
    this.d = 3;
  };
  Zip2.prototype.e = function() {
    var bt = 0, l = 0, tl = 0;
    for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
      var f = _a2[_i];
      tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);
    }
    var out = new u8(tl + 22);
    for (var _b2 = 0, _c = this.u; _b2 < _c.length; _b2++) {
      var f = _c[_b2];
      wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);
      bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;
    }
    wzf(out, bt, this.u.length, tl, l);
    this.ondata(null, out, true);
    this.d = 2;
  };
  Zip2.prototype.terminate = function() {
    for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
      var f = _a2[_i];
      f.t();
    }
    this.d = 2;
  };
  return Zip2;
}();
var UnzipPassThrough = function() {
  function UnzipPassThrough2() {
  }
  UnzipPassThrough2.prototype.push = function(data, final) {
    this.ondata(null, data, final);
  };
  UnzipPassThrough2.compression = 0;
  return UnzipPassThrough2;
}();
var UnzipInflate = function() {
  function UnzipInflate2() {
    var _this = this;
    this.i = new Inflate(function(dat, final) {
      _this.ondata(null, dat, final);
    });
  }
  UnzipInflate2.prototype.push = function(data, final) {
    try {
      this.i.push(data, final);
    } catch (e) {
      this.ondata(e, null, final);
    }
  };
  UnzipInflate2.compression = 8;
  return UnzipInflate2;
}();
var AsyncUnzipInflate = function() {
  function AsyncUnzipInflate2(_, sz) {
    var _this = this;
    if (sz < 32e4) {
      this.i = new Inflate(function(dat, final) {
        _this.ondata(null, dat, final);
      });
    } else {
      this.i = new AsyncInflate(function(err2, dat, final) {
        _this.ondata(err2, dat, final);
      });
      this.terminate = this.i.terminate;
    }
  }
  AsyncUnzipInflate2.prototype.push = function(data, final) {
    if (this.i.terminate)
      data = slc(data, 0);
    this.i.push(data, final);
  };
  AsyncUnzipInflate2.compression = 8;
  return AsyncUnzipInflate2;
}();
var Unzip = function() {
  function Unzip2(cb) {
    this.onfile = cb;
    this.k = [];
    this.o = {
      0: UnzipPassThrough
    };
    this.p = et;
  }
  Unzip2.prototype.push = function(chunk, final) {
    var _this = this;
    if (!this.onfile)
      err(5);
    if (!this.p)
      err(4);
    if (this.c > 0) {
      var len = Math.min(this.c, chunk.length);
      var toAdd = chunk.subarray(0, len);
      this.c -= len;
      if (this.d)
        this.d.push(toAdd, !this.c);
      else
        this.k[0].push(toAdd);
      chunk = chunk.subarray(len);
      if (chunk.length)
        return this.push(chunk, final);
    } else {
      var f = 0, i = 0, is = void 0, buf = void 0;
      if (!this.p.length)
        buf = chunk;
      else if (!chunk.length)
        buf = this.p;
      else {
        buf = new u8(this.p.length + chunk.length);
        buf.set(this.p), buf.set(chunk, this.p.length);
      }
      var l = buf.length, oc = this.c, add = oc && this.d;
      var _loop_2 = function() {
        var _a2;
        var sig = b4(buf, i);
        if (sig == 67324752) {
          f = 1, is = i;
          this_1.d = null;
          this_1.c = 0;
          var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);
          if (l > i + 30 + fnl + es) {
            var chks_3 = [];
            this_1.k.unshift(chks_3);
            f = 2;
            var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);
            var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);
            if (sc_1 == 4294967295) {
              _a2 = dd ? [-2] : z64e(buf, i), sc_1 = _a2[0], su_1 = _a2[1];
            } else if (dd)
              sc_1 = -1;
            i += es;
            this_1.c = sc_1;
            var d_1;
            var file_1 = {
              name: fn_1,
              compression: cmp_1,
              start: function() {
                if (!file_1.ondata)
                  err(5);
                if (!sc_1)
                  file_1.ondata(null, et, true);
                else {
                  var ctr = _this.o[cmp_1];
                  if (!ctr)
                    file_1.ondata(err(14, "unknown compression type " + cmp_1, 1), null, false);
                  d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);
                  d_1.ondata = function(err2, dat3, final2) {
                    file_1.ondata(err2, dat3, final2);
                  };
                  for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {
                    var dat2 = chks_4[_i];
                    d_1.push(dat2, false);
                  }
                  if (_this.k[0] == chks_3 && _this.c)
                    _this.d = d_1;
                  else
                    d_1.push(et, true);
                }
              },
              terminate: function() {
                if (d_1 && d_1.terminate)
                  d_1.terminate();
              }
            };
            if (sc_1 >= 0)
              file_1.size = sc_1, file_1.originalSize = su_1;
            this_1.onfile(file_1);
          }
          return "break";
        } else if (oc) {
          if (sig == 134695760) {
            is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;
            return "break";
          } else if (sig == 33639248) {
            is = i -= 4, f = 3, this_1.c = 0;
            return "break";
          }
        }
      };
      var this_1 = this;
      for (; i < l - 4; ++i) {
        var state_1 = _loop_2();
        if (state_1 === "break")
          break;
      }
      this.p = et;
      if (oc < 0) {
        var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 134695760 && 4)) : buf.subarray(0, i);
        if (add)
          add.push(dat, !!f);
        else
          this.k[+(f == 2)].push(dat);
      }
      if (f & 2)
        return this.push(buf.subarray(i), final);
      this.p = buf.subarray(i);
    }
    if (final) {
      if (this.c)
        err(13);
      this.p = null;
    }
  };
  Unzip2.prototype.register = function(decoder) {
    this.o[decoder.compression] = decoder;
  };
  return Unzip2;
}();

// node_modules/nifti-reader-js/dist/nifti-extension.js
var NIFTIEXTENSION = class {
  constructor(esize, ecode, edata, littleEndian) {
    __publicField(this, "esize");
    __publicField(this, "ecode");
    __publicField(this, "edata");
    __publicField(this, "littleEndian");
    if (esize % 16 != 0) {
      throw new Error("This does not appear to be a NIFTI extension");
    }
    this.esize = esize;
    this.ecode = ecode;
    this.edata = edata;
    this.littleEndian = littleEndian;
  }
  /**
   * Returns extension as ArrayBuffer.
   * @returns {ArrayBuffer}
   */
  toArrayBuffer() {
    let byteArray = new Uint8Array(this.esize);
    let data = new Uint8Array(this.edata);
    byteArray.set(data, 8);
    let view = new DataView(byteArray.buffer);
    view.setInt32(0, this.esize, this.littleEndian);
    view.setInt32(4, this.ecode, this.littleEndian);
    return byteArray.buffer;
  }
};

// node_modules/nifti-reader-js/dist/utilities.js
var _Utils = class _Utils {
  /*** Static methods ***/
  static getStringAt(data, start, end) {
    var str = "", ctr, ch3;
    for (ctr = start; ctr < end; ctr += 1) {
      ch3 = data.getUint8(ctr);
      if (ch3 !== 0) {
        str += String.fromCharCode(ch3);
      }
    }
    return str;
  }
  static getIntAt(data, start, littleEndian) {
    return data.getInt32(start, littleEndian);
  }
  static getFloatAt(data, start, littleEndian) {
    return data.getFloat32(start, littleEndian);
  }
  static getDoubleAt(data, start, littleEndian) {
    return data.getFloat64(start, littleEndian);
  }
  static getInt64At(dataView, index, littleEndian) {
    const low = dataView.getUint32(index, littleEndian);
    const high = dataView.getInt32(index + 4, littleEndian);
    let result;
    if (littleEndian) {
      result = high * 2 ** 32 + low;
    } else {
      result = low * 2 ** 32 + high;
    }
    if (high < 0) {
      result += -1 * 2 ** 32 * 2 ** 32;
    }
    return result;
  }
  static getUint64At(dataView, index, littleEndian) {
    const low = dataView.getUint32(index + (littleEndian ? 0 : 4), littleEndian);
    const high = dataView.getUint32(index + (littleEndian ? 4 : 0), littleEndian);
    return littleEndian ? high * 2 ** 32 + low : low * 2 ** 32 + high;
  }
  static getExtensionsAt(data, start, littleEndian, voxOffset) {
    let extensions = [];
    let extensionByteIndex = start;
    while (extensionByteIndex < voxOffset) {
      let extensionLittleEndian = littleEndian;
      let esize = _Utils.getIntAt(data, extensionByteIndex, littleEndian);
      if (!esize) {
        break;
      }
      if (esize + extensionByteIndex > voxOffset) {
        extensionLittleEndian = !extensionLittleEndian;
        esize = _Utils.getIntAt(data, extensionByteIndex, extensionLittleEndian);
        if (esize + extensionByteIndex > voxOffset) {
          throw new Error("This does not appear to be a valid NIFTI extension");
        }
      }
      if (esize % 16 != 0) {
        throw new Error("This does not appear to be a NIFTI extension");
      }
      let ecode = _Utils.getIntAt(data, extensionByteIndex + 4, extensionLittleEndian);
      let edata = data.buffer.slice(extensionByteIndex + 8, extensionByteIndex + esize);
      let extension = new NIFTIEXTENSION(esize, ecode, edata, extensionLittleEndian);
      extensions.push(extension);
      extensionByteIndex += esize;
    }
    return extensions;
  }
  static toArrayBuffer(buffer) {
    var ab, view, i;
    ab = new ArrayBuffer(buffer.length);
    view = new Uint8Array(ab);
    for (i = 0; i < buffer.length; i += 1) {
      view[i] = buffer[i];
    }
    return ab;
  }
  static isString(obj) {
    return typeof obj === "string" || obj instanceof String;
  }
  static formatNumber(num, shortFormat = void 0) {
    let val;
    if (_Utils.isString(num)) {
      val = Number(num);
    } else {
      val = num;
    }
    if (shortFormat) {
      val = val.toPrecision(5);
    } else {
      val = val.toPrecision(7);
    }
    return parseFloat(val);
  }
  // http://stackoverflow.com/questions/18638900/javascript-crc32
  static makeCRCTable() {
    let c;
    let crcTable = [];
    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
      }
      crcTable[n] = c;
    }
    return crcTable;
  }
  static crc32(dataView) {
    if (!_Utils.crcTable) {
      _Utils.crcTable = _Utils.makeCRCTable();
    }
    const crcTable = _Utils.crcTable;
    let crc2 = 0 ^ -1;
    for (var i = 0; i < dataView.byteLength; i++) {
      crc2 = crc2 >>> 8 ^ crcTable[(crc2 ^ dataView.getUint8(i)) & 255];
    }
    return (crc2 ^ -1) >>> 0;
  }
};
/*** Static Pseudo-constants ***/
__publicField(_Utils, "crcTable", null);
__publicField(_Utils, "GUNZIP_MAGIC_COOKIE1", 31);
__publicField(_Utils, "GUNZIP_MAGIC_COOKIE2", 139);
__publicField(_Utils, "getByteAt", function(data, start) {
  return data.getUint8(start);
});
__publicField(_Utils, "getShortAt", function(data, start, littleEndian) {
  return data.getInt16(start, littleEndian);
});
var Utils = _Utils;

// node_modules/nifti-reader-js/dist/nifti1.js
var _NIFTI1 = class _NIFTI1 {
  constructor() {
    __publicField(this, "littleEndian", false);
    __publicField(this, "dim_info", 0);
    __publicField(this, "dims", []);
    __publicField(this, "intent_p1", 0);
    __publicField(this, "intent_p2", 0);
    __publicField(this, "intent_p3", 0);
    __publicField(this, "intent_code", 0);
    __publicField(this, "datatypeCode", 0);
    __publicField(this, "numBitsPerVoxel", 0);
    __publicField(this, "slice_start", 0);
    __publicField(this, "slice_end", 0);
    __publicField(this, "slice_code", 0);
    __publicField(this, "pixDims", []);
    __publicField(this, "vox_offset", 0);
    __publicField(this, "scl_slope", 1);
    __publicField(this, "scl_inter", 0);
    __publicField(this, "xyzt_units", 0);
    __publicField(this, "cal_max", 0);
    __publicField(this, "cal_min", 0);
    __publicField(this, "slice_duration", 0);
    __publicField(this, "toffset", 0);
    __publicField(this, "description", "");
    __publicField(this, "aux_file", "");
    __publicField(this, "intent_name", "");
    __publicField(this, "qform_code", 0);
    __publicField(this, "sform_code", 0);
    __publicField(this, "quatern_a", 0);
    __publicField(this, "quatern_b", 0);
    __publicField(this, "quatern_c", 0);
    __publicField(this, "quatern_d", 0);
    __publicField(this, "qoffset_x", 0);
    __publicField(this, "qoffset_y", 0);
    __publicField(this, "qoffset_z", 0);
    __publicField(this, "affine", [
      [1, 0, 0, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1]
    ]);
    __publicField(this, "qfac", 1);
    __publicField(this, "quatern_R");
    __publicField(this, "magic", "0");
    __publicField(this, "isHDR", false);
    __publicField(this, "extensionFlag", [0, 0, 0, 0]);
    __publicField(this, "extensionSize", 0);
    __publicField(this, "extensionCode", 0);
    __publicField(this, "extensions", []);
    /**
     * Returns a human-readable string of datatype.
     * @param {number} code
     * @returns {string}
     */
    __publicField(this, "getDatatypeCodeString", function(code) {
      if (code === _NIFTI1.TYPE_UINT8) {
        return "1-Byte Unsigned Integer";
      } else if (code === _NIFTI1.TYPE_INT16) {
        return "2-Byte Signed Integer";
      } else if (code === _NIFTI1.TYPE_INT32) {
        return "4-Byte Signed Integer";
      } else if (code === _NIFTI1.TYPE_FLOAT32) {
        return "4-Byte Float";
      } else if (code === _NIFTI1.TYPE_FLOAT64) {
        return "8-Byte Float";
      } else if (code === _NIFTI1.TYPE_RGB24) {
        return "RGB";
      } else if (code === _NIFTI1.TYPE_INT8) {
        return "1-Byte Signed Integer";
      } else if (code === _NIFTI1.TYPE_UINT16) {
        return "2-Byte Unsigned Integer";
      } else if (code === _NIFTI1.TYPE_UINT32) {
        return "4-Byte Unsigned Integer";
      } else if (code === _NIFTI1.TYPE_INT64) {
        return "8-Byte Signed Integer";
      } else if (code === _NIFTI1.TYPE_UINT64) {
        return "8-Byte Unsigned Integer";
      } else {
        return "Unknown";
      }
    });
    /**
     * Returns a human-readable string of transform type.
     * @param {number} code
     * @returns {string}
     */
    __publicField(this, "getTransformCodeString", function(code) {
      if (code === _NIFTI1.XFORM_SCANNER_ANAT) {
        return "Scanner";
      } else if (code === _NIFTI1.XFORM_ALIGNED_ANAT) {
        return "Aligned";
      } else if (code === _NIFTI1.XFORM_TALAIRACH) {
        return "Talairach";
      } else if (code === _NIFTI1.XFORM_MNI_152) {
        return "MNI";
      } else {
        return "Unknown";
      }
    });
    /**
     * Returns a human-readable string of spatial and temporal units.
     * @param {number} code
     * @returns {string}
     */
    __publicField(this, "getUnitsCodeString", function(code) {
      if (code === _NIFTI1.UNITS_METER) {
        return "Meters";
      } else if (code === _NIFTI1.UNITS_MM) {
        return "Millimeters";
      } else if (code === _NIFTI1.UNITS_MICRON) {
        return "Microns";
      } else if (code === _NIFTI1.UNITS_SEC) {
        return "Seconds";
      } else if (code === _NIFTI1.UNITS_MSEC) {
        return "Milliseconds";
      } else if (code === _NIFTI1.UNITS_USEC) {
        return "Microseconds";
      } else if (code === _NIFTI1.UNITS_HZ) {
        return "Hz";
      } else if (code === _NIFTI1.UNITS_PPM) {
        return "PPM";
      } else if (code === _NIFTI1.UNITS_RADS) {
        return "Rads";
      } else {
        return "Unknown";
      }
    });
    __publicField(this, "nifti_mat33_mul", function(A, B) {
      var C = [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
      ], i, j;
      for (i = 0; i < 3; i += 1) {
        for (j = 0; j < 3; j += 1) {
          C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + A[i][2] * B[2][j];
        }
      }
      return C;
    });
    __publicField(this, "nifti_mat33_determ", function(R) {
      var r11, r12, r13, r21, r22, r23, r31, r32, r33;
      r11 = R[0][0];
      r12 = R[0][1];
      r13 = R[0][2];
      r21 = R[1][0];
      r22 = R[1][1];
      r23 = R[1][2];
      r31 = R[2][0];
      r32 = R[2][1];
      r33 = R[2][2];
      return r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13;
    });
  }
  /*** Prototype Methods ***/
  /**
   * Reads the header data.
   * @param {ArrayBuffer} data
   */
  readHeader(data) {
    var rawData = new DataView(data), magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian), ctr, ctrOut, ctrIn, index;
    if (magicCookieVal !== _NIFTI1.MAGIC_COOKIE) {
      this.littleEndian = true;
      magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian);
    }
    if (magicCookieVal !== _NIFTI1.MAGIC_COOKIE) {
      throw new Error("This does not appear to be a NIFTI file!");
    }
    this.dim_info = Utils.getByteAt(rawData, 39);
    for (ctr = 0; ctr < 8; ctr += 1) {
      index = 40 + ctr * 2;
      this.dims[ctr] = Utils.getShortAt(rawData, index, this.littleEndian);
    }
    this.intent_p1 = Utils.getFloatAt(rawData, 56, this.littleEndian);
    this.intent_p2 = Utils.getFloatAt(rawData, 60, this.littleEndian);
    this.intent_p3 = Utils.getFloatAt(rawData, 64, this.littleEndian);
    this.intent_code = Utils.getShortAt(rawData, 68, this.littleEndian);
    this.datatypeCode = Utils.getShortAt(rawData, 70, this.littleEndian);
    this.numBitsPerVoxel = Utils.getShortAt(rawData, 72, this.littleEndian);
    this.slice_start = Utils.getShortAt(rawData, 74, this.littleEndian);
    for (ctr = 0; ctr < 8; ctr += 1) {
      index = 76 + ctr * 4;
      this.pixDims[ctr] = Utils.getFloatAt(rawData, index, this.littleEndian);
    }
    this.vox_offset = Utils.getFloatAt(rawData, 108, this.littleEndian);
    this.scl_slope = Utils.getFloatAt(rawData, 112, this.littleEndian);
    this.scl_inter = Utils.getFloatAt(rawData, 116, this.littleEndian);
    this.slice_end = Utils.getShortAt(rawData, 120, this.littleEndian);
    this.slice_code = Utils.getByteAt(rawData, 122);
    this.xyzt_units = Utils.getByteAt(rawData, 123);
    this.cal_max = Utils.getFloatAt(rawData, 124, this.littleEndian);
    this.cal_min = Utils.getFloatAt(rawData, 128, this.littleEndian);
    this.slice_duration = Utils.getFloatAt(rawData, 132, this.littleEndian);
    this.toffset = Utils.getFloatAt(rawData, 136, this.littleEndian);
    this.description = Utils.getStringAt(rawData, 148, 228);
    this.aux_file = Utils.getStringAt(rawData, 228, 252);
    this.qform_code = Utils.getShortAt(rawData, 252, this.littleEndian);
    this.sform_code = Utils.getShortAt(rawData, 254, this.littleEndian);
    this.quatern_b = Utils.getFloatAt(rawData, 256, this.littleEndian);
    this.quatern_c = Utils.getFloatAt(rawData, 260, this.littleEndian);
    this.quatern_d = Utils.getFloatAt(rawData, 264, this.littleEndian);
    this.quatern_a = Math.sqrt(1 - (Math.pow(this.quatern_b, 2) + Math.pow(this.quatern_c, 2) + Math.pow(this.quatern_d, 2)));
    this.qoffset_x = Utils.getFloatAt(rawData, 268, this.littleEndian);
    this.qoffset_y = Utils.getFloatAt(rawData, 272, this.littleEndian);
    this.qoffset_z = Utils.getFloatAt(rawData, 276, this.littleEndian);
    if (this.qform_code < 1 && this.sform_code < 1) {
      this.affine[0][0] = this.pixDims[1];
      this.affine[1][1] = this.pixDims[2];
      this.affine[2][2] = this.pixDims[3];
    }
    if (this.qform_code > 0 && this.sform_code < this.qform_code) {
      const a = this.quatern_a;
      const b = this.quatern_b;
      const c = this.quatern_c;
      const d = this.quatern_d;
      this.qfac = this.pixDims[0] === 0 ? 1 : this.pixDims[0];
      this.quatern_R = [
        [a * a + b * b - c * c - d * d, 2 * b * c - 2 * a * d, 2 * b * d + 2 * a * c],
        [2 * b * c + 2 * a * d, a * a + c * c - b * b - d * d, 2 * c * d - 2 * a * b],
        [2 * b * d - 2 * a * c, 2 * c * d + 2 * a * b, a * a + d * d - c * c - b * b]
      ];
      for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 3; ctrIn += 1) {
          this.affine[ctrOut][ctrIn] = this.quatern_R[ctrOut][ctrIn] * this.pixDims[ctrIn + 1];
          if (ctrIn === 2) {
            this.affine[ctrOut][ctrIn] *= this.qfac;
          }
        }
      }
      this.affine[0][3] = this.qoffset_x;
      this.affine[1][3] = this.qoffset_y;
      this.affine[2][3] = this.qoffset_z;
    } else if (this.sform_code > 0) {
      for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
          index = 280 + (ctrOut * 4 + ctrIn) * 4;
          this.affine[ctrOut][ctrIn] = Utils.getFloatAt(rawData, index, this.littleEndian);
        }
      }
    }
    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;
    this.intent_name = Utils.getStringAt(rawData, 328, 344);
    this.magic = Utils.getStringAt(rawData, 344, 348);
    this.isHDR = this.magic === String.fromCharCode.apply(null, _NIFTI1.MAGIC_NUMBER2);
    if (rawData.byteLength > _NIFTI1.MAGIC_COOKIE) {
      this.extensionFlag[0] = Utils.getByteAt(rawData, 348);
      this.extensionFlag[1] = Utils.getByteAt(rawData, 348 + 1);
      this.extensionFlag[2] = Utils.getByteAt(rawData, 348 + 2);
      this.extensionFlag[3] = Utils.getByteAt(rawData, 348 + 3);
      let isExtensionCapable = true;
      if (!this.isHDR && this.vox_offset <= 352)
        isExtensionCapable = false;
      if (rawData.byteLength <= 352 + 16)
        isExtensionCapable = false;
      if (isExtensionCapable && this.extensionFlag[0]) {
        this.extensions = Utils.getExtensionsAt(rawData, this.getExtensionLocation(), this.littleEndian, this.vox_offset);
        this.extensionSize = this.extensions[0].esize;
        this.extensionCode = this.extensions[0].ecode;
      }
    }
  }
  /**
   * Returns a formatted string of header fields.
   * @returns {string}
   */
  toFormattedString() {
    var fmt = Utils.formatNumber, string = "";
    string += "Dim Info = " + this.dim_info + "\n";
    string += "Image Dimensions (1-8): " + this.dims[0] + ", " + this.dims[1] + ", " + this.dims[2] + ", " + this.dims[3] + ", " + this.dims[4] + ", " + this.dims[5] + ", " + this.dims[6] + ", " + this.dims[7] + "\n";
    string += "Intent Parameters (1-3): " + this.intent_p1 + ", " + this.intent_p2 + ", " + this.intent_p3 + "\n";
    string += "Intent Code = " + this.intent_code + "\n";
    string += "Datatype = " + this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n";
    string += "Bits Per Voxel = " + this.numBitsPerVoxel + "\n";
    string += "Slice Start = " + this.slice_start + "\n";
    string += "Voxel Dimensions (1-8): " + fmt(this.pixDims[0]) + ", " + fmt(this.pixDims[1]) + ", " + fmt(this.pixDims[2]) + ", " + fmt(this.pixDims[3]) + ", " + fmt(this.pixDims[4]) + ", " + fmt(this.pixDims[5]) + ", " + fmt(this.pixDims[6]) + ", " + fmt(this.pixDims[7]) + "\n";
    string += "Image Offset = " + this.vox_offset + "\n";
    string += "Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n";
    string += "Slice End = " + this.slice_end + "\n";
    string += "Slice Code = " + this.slice_code + "\n";
    string += "Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(_NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(_NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n";
    string += "Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n";
    string += "Slice Duration = " + this.slice_duration + "\n";
    string += "Time Axis Shift = " + this.toffset + "\n";
    string += 'Description: "' + this.description + '"\n';
    string += 'Auxiliary File: "' + this.aux_file + '"\n';
    string += "Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n";
    string += "S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n";
    string += "Quaternion Parameters:  b = " + fmt(this.quatern_b) + "  c = " + fmt(this.quatern_c) + "  d = " + fmt(this.quatern_d) + "\n";
    string += "Quaternion Offsets:  x = " + this.qoffset_x + "  y = " + this.qoffset_y + "  z = " + this.qoffset_z + "\n";
    string += "S-Form Parameters X: " + fmt(this.affine[0][0]) + ", " + fmt(this.affine[0][1]) + ", " + fmt(this.affine[0][2]) + ", " + fmt(this.affine[0][3]) + "\n";
    string += "S-Form Parameters Y: " + fmt(this.affine[1][0]) + ", " + fmt(this.affine[1][1]) + ", " + fmt(this.affine[1][2]) + ", " + fmt(this.affine[1][3]) + "\n";
    string += "S-Form Parameters Z: " + fmt(this.affine[2][0]) + ", " + fmt(this.affine[2][1]) + ", " + fmt(this.affine[2][2]) + ", " + fmt(this.affine[2][3]) + "\n";
    string += 'Intent Name: "' + this.intent_name + '"\n';
    if (this.extensionFlag[0]) {
      string += "Extension: Size = " + this.extensionSize + "  Code = " + this.extensionCode + "\n";
    }
    return string;
  }
  /**
   * Returns the qform matrix.
   * @returns {Array.<Array.<number>>}
   */
  getQformMat() {
    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x, this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);
  }
  /**
   * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
   * @param {number} qb
   * @param {number} qc
   * @param {number} qd
   * @param {number} qx
   * @param {number} qy
   * @param {number} qz
   * @param {number} dx
   * @param {number} dy
   * @param {number} dz
   * @param {number} qfac
   * @returns {Array.<Array.<number>>}
   */
  convertNiftiQFormToNiftiSForm(qb, qc, qd, qx, qy, qz, dx, dy, dz, qfac) {
    var R = [
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ], a, b = qb, c = qc, d = qd, xd, yd, zd;
    R[3][0] = R[3][1] = R[3][2] = 0;
    R[3][3] = 1;
    a = 1 - (b * b + c * c + d * d);
    if (a < 1e-7) {
      a = 1 / Math.sqrt(b * b + c * c + d * d);
      b *= a;
      c *= a;
      d *= a;
      a = 0;
    } else {
      a = Math.sqrt(a);
    }
    xd = dx > 0 ? dx : 1;
    yd = dy > 0 ? dy : 1;
    zd = dz > 0 ? dz : 1;
    if (qfac < 0) {
      zd = -zd;
    }
    R[0][0] = (a * a + b * b - c * c - d * d) * xd;
    R[0][1] = 2 * (b * c - a * d) * yd;
    R[0][2] = 2 * (b * d + a * c) * zd;
    R[1][0] = 2 * (b * c + a * d) * xd;
    R[1][1] = (a * a + c * c - b * b - d * d) * yd;
    R[1][2] = 2 * (c * d - a * b) * zd;
    R[2][0] = 2 * (b * d - a * c) * xd;
    R[2][1] = 2 * (c * d + a * b) * yd;
    R[2][2] = (a * a + d * d - c * c - b * b) * zd;
    R[0][3] = qx;
    R[1][3] = qy;
    R[2][3] = qz;
    return R;
  }
  /**
   * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
   * @param {Array.<Array.<number>>} R
   * @returns {string}
   */
  convertNiftiSFormToNEMA(R) {
    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest, M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;
    k = 0;
    Q = [
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0]
    ];
    P = [
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0]
    ];
    xi = R[0][0];
    xj = R[0][1];
    xk = R[0][2];
    yi = R[1][0];
    yj = R[1][1];
    yk = R[1][2];
    zi = R[2][0];
    zj = R[2][1];
    zk = R[2][2];
    val = Math.sqrt(xi * xi + yi * yi + zi * zi);
    if (val === 0) {
      return null;
    }
    xi /= val;
    yi /= val;
    zi /= val;
    val = Math.sqrt(xj * xj + yj * yj + zj * zj);
    if (val === 0) {
      return null;
    }
    xj /= val;
    yj /= val;
    zj /= val;
    val = xi * xj + yi * yj + zi * zj;
    if (Math.abs(val) > 1e-4) {
      xj -= val * xi;
      yj -= val * yi;
      zj -= val * zi;
      val = Math.sqrt(xj * xj + yj * yj + zj * zj);
      if (val === 0) {
        return null;
      }
      xj /= val;
      yj /= val;
      zj /= val;
    }
    val = Math.sqrt(xk * xk + yk * yk + zk * zk);
    if (val === 0) {
      xk = yi * zj - zi * yj;
      yk = zi * xj - zj * xi;
      zk = xi * yj - yi * xj;
    } else {
      xk /= val;
      yk /= val;
      zk /= val;
    }
    val = xi * xk + yi * yk + zi * zk;
    if (Math.abs(val) > 1e-4) {
      xk -= val * xi;
      yk -= val * yi;
      zk -= val * zi;
      val = Math.sqrt(xk * xk + yk * yk + zk * zk);
      if (val === 0) {
        return null;
      }
      xk /= val;
      yk /= val;
      zk /= val;
    }
    val = xj * xk + yj * yk + zj * zk;
    if (Math.abs(val) > 1e-4) {
      xk -= val * xj;
      yk -= val * yj;
      zk -= val * zj;
      val = Math.sqrt(xk * xk + yk * yk + zk * zk);
      if (val === 0) {
        return null;
      }
      xk /= val;
      yk /= val;
      zk /= val;
    }
    Q[0][0] = xi;
    Q[0][1] = xj;
    Q[0][2] = xk;
    Q[1][0] = yi;
    Q[1][1] = yj;
    Q[1][2] = yk;
    Q[2][0] = zi;
    Q[2][1] = zj;
    Q[2][2] = zk;
    detQ = this.nifti_mat33_determ(Q);
    if (detQ === 0) {
      return null;
    }
    vbest = -666;
    ibest = pbest = qbest = rbest = 1;
    jbest = 2;
    kbest = 3;
    for (i = 1; i <= 3; i += 1) {
      for (j = 1; j <= 3; j += 1) {
        if (i !== j) {
          for (k = 1; k <= 3; k += 1) {
            if (!(i === k || j === k)) {
              P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0;
              for (p = -1; p <= 1; p += 2) {
                for (q = -1; q <= 1; q += 2) {
                  for (r = -1; r <= 1; r += 2) {
                    P[0][i - 1] = p;
                    P[1][j - 1] = q;
                    P[2][k - 1] = r;
                    detP = this.nifti_mat33_determ(P);
                    if (detP * detQ > 0) {
                      M = this.nifti_mat33_mul(P, Q);
                      val = M[0][0] + M[1][1] + M[2][2];
                      if (val > vbest) {
                        vbest = val;
                        ibest = i;
                        jbest = j;
                        kbest = k;
                        pbest = p;
                        qbest = q;
                        rbest = r;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    iChar = jChar = kChar = iSense = jSense = kSense = "";
    switch (ibest * pbest) {
      case 1:
        iChar = "X";
        iSense = "+";
        break;
      case -1:
        iChar = "X";
        iSense = "-";
        break;
      case 2:
        iChar = "Y";
        iSense = "+";
        break;
      case -2:
        iChar = "Y";
        iSense = "-";
        break;
      case 3:
        iChar = "Z";
        iSense = "+";
        break;
      case -3:
        iChar = "Z";
        iSense = "-";
        break;
    }
    switch (jbest * qbest) {
      case 1:
        jChar = "X";
        jSense = "+";
        break;
      case -1:
        jChar = "X";
        jSense = "-";
        break;
      case 2:
        jChar = "Y";
        jSense = "+";
        break;
      case -2:
        jChar = "Y";
        jSense = "-";
        break;
      case 3:
        jChar = "Z";
        jSense = "+";
        break;
      case -3:
        jChar = "Z";
        jSense = "-";
        break;
    }
    switch (kbest * rbest) {
      case 1:
        kChar = "X";
        kSense = "+";
        break;
      case -1:
        kChar = "X";
        kSense = "-";
        break;
      case 2:
        kChar = "Y";
        kSense = "+";
        break;
      case -2:
        kChar = "Y";
        kSense = "-";
        break;
      case 3:
        kChar = "Z";
        kSense = "+";
        break;
      case -3:
        kChar = "Z";
        kSense = "-";
        break;
    }
    return iChar + jChar + kChar + iSense + jSense + kSense;
  }
  /**
   * Returns the byte index of the extension.
   * @returns {number}
   */
  getExtensionLocation() {
    return _NIFTI1.MAGIC_COOKIE + 4;
  }
  /**
   * Returns the extension size.
   * @param {DataView} data
   * @returns {number}
   */
  getExtensionSize(data) {
    return Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);
  }
  /**
   * Returns the extension code.
   * @param {DataView} data
   * @returns {number}
   */
  getExtensionCode(data) {
    return Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);
  }
  /**
   * Adds an extension
   * @param {NIFTIEXTENSION} extension
   * @param {number} index
   */
  addExtension(extension, index = -1) {
    if (index == -1) {
      this.extensions.push(extension);
    } else {
      this.extensions.splice(index, 0, extension);
    }
    this.vox_offset += extension.esize;
  }
  /**
   * Removes an extension
   * @param {number} index
   */
  removeExtension(index) {
    let extension = this.extensions[index];
    if (extension) {
      this.vox_offset -= extension.esize;
    }
    this.extensions.splice(index, 1);
  }
  /**
   * Returns header as ArrayBuffer.
   * @param {boolean} includeExtensions - should extension bytes be included
   * @returns {ArrayBuffer}
   */
  toArrayBuffer(includeExtensions = false) {
    const SHORT_SIZE = 2;
    const FLOAT32_SIZE = 4;
    let byteSize = 348 + 4;
    if (includeExtensions) {
      for (let extension of this.extensions) {
        byteSize += extension.esize;
      }
    }
    let byteArray = new Uint8Array(byteSize);
    let view = new DataView(byteArray.buffer);
    view.setInt32(0, 348, this.littleEndian);
    view.setUint8(39, this.dim_info);
    for (let i = 0; i < 8; i++) {
      view.setUint16(40 + SHORT_SIZE * i, this.dims[i], this.littleEndian);
    }
    view.setFloat32(56, this.intent_p1, this.littleEndian);
    view.setFloat32(60, this.intent_p2, this.littleEndian);
    view.setFloat32(64, this.intent_p3, this.littleEndian);
    view.setInt16(68, this.intent_code, this.littleEndian);
    view.setInt16(70, this.datatypeCode, this.littleEndian);
    view.setInt16(72, this.numBitsPerVoxel, this.littleEndian);
    view.setInt16(74, this.slice_start, this.littleEndian);
    for (let i = 0; i < 8; i++) {
      view.setFloat32(76 + FLOAT32_SIZE * i, this.pixDims[i], this.littleEndian);
    }
    view.setFloat32(108, this.vox_offset, this.littleEndian);
    view.setFloat32(112, this.scl_slope, this.littleEndian);
    view.setFloat32(116, this.scl_inter, this.littleEndian);
    view.setInt16(120, this.slice_end, this.littleEndian);
    view.setUint8(122, this.slice_code);
    view.setUint8(123, this.xyzt_units);
    view.setFloat32(124, this.cal_max, this.littleEndian);
    view.setFloat32(128, this.cal_min, this.littleEndian);
    view.setFloat32(132, this.slice_duration, this.littleEndian);
    view.setFloat32(136, this.toffset, this.littleEndian);
    byteArray.set(new TextEncoder().encode(this.description), 148);
    byteArray.set(new TextEncoder().encode(this.aux_file), 228);
    view.setInt16(252, this.qform_code, this.littleEndian);
    view.setInt16(254, this.sform_code, this.littleEndian);
    view.setFloat32(256, this.quatern_b, this.littleEndian);
    view.setFloat32(260, this.quatern_c, this.littleEndian);
    view.setFloat32(264, this.quatern_d, this.littleEndian);
    view.setFloat32(268, this.qoffset_x, this.littleEndian);
    view.setFloat32(272, this.qoffset_y, this.littleEndian);
    view.setFloat32(276, this.qoffset_z, this.littleEndian);
    const flattened = this.affine.flat();
    for (let i = 0; i < 12; i++) {
      view.setFloat32(280 + FLOAT32_SIZE * i, flattened[i], this.littleEndian);
    }
    byteArray.set(new TextEncoder().encode(this.intent_name), 328);
    byteArray.set(new TextEncoder().encode(this.magic), 344);
    if (includeExtensions) {
      byteArray.set(Uint8Array.from([1, 0, 0, 0]), 348);
      let extensionByteIndex = this.getExtensionLocation();
      for (const extension of this.extensions) {
        view.setInt32(extensionByteIndex, extension.esize, extension.littleEndian);
        view.setInt32(extensionByteIndex + 4, extension.ecode, extension.littleEndian);
        byteArray.set(new Uint8Array(extension.edata), extensionByteIndex + 8);
        extensionByteIndex += extension.esize;
      }
    } else {
      byteArray.set(new Uint8Array(4).fill(0), 348);
    }
    return byteArray.buffer;
  }
};
/*** Static Pseudo-constants ***/
// datatype codes
__publicField(_NIFTI1, "TYPE_NONE", 0);
__publicField(_NIFTI1, "TYPE_BINARY", 1);
__publicField(_NIFTI1, "TYPE_UINT8", 2);
__publicField(_NIFTI1, "TYPE_INT16", 4);
__publicField(_NIFTI1, "TYPE_INT32", 8);
__publicField(_NIFTI1, "TYPE_FLOAT32", 16);
__publicField(_NIFTI1, "TYPE_COMPLEX64", 32);
__publicField(_NIFTI1, "TYPE_FLOAT64", 64);
__publicField(_NIFTI1, "TYPE_RGB24", 128);
__publicField(_NIFTI1, "TYPE_INT8", 256);
__publicField(_NIFTI1, "TYPE_UINT16", 512);
__publicField(_NIFTI1, "TYPE_UINT32", 768);
__publicField(_NIFTI1, "TYPE_INT64", 1024);
__publicField(_NIFTI1, "TYPE_UINT64", 1280);
__publicField(_NIFTI1, "TYPE_FLOAT128", 1536);
__publicField(_NIFTI1, "TYPE_COMPLEX128", 1792);
__publicField(_NIFTI1, "TYPE_COMPLEX256", 2048);
// transform codes
__publicField(_NIFTI1, "XFORM_UNKNOWN", 0);
__publicField(_NIFTI1, "XFORM_SCANNER_ANAT", 1);
__publicField(_NIFTI1, "XFORM_ALIGNED_ANAT", 2);
__publicField(_NIFTI1, "XFORM_TALAIRACH", 3);
__publicField(_NIFTI1, "XFORM_MNI_152", 4);
// unit codes
__publicField(_NIFTI1, "SPATIAL_UNITS_MASK", 7);
__publicField(_NIFTI1, "TEMPORAL_UNITS_MASK", 56);
__publicField(_NIFTI1, "UNITS_UNKNOWN", 0);
__publicField(_NIFTI1, "UNITS_METER", 1);
__publicField(_NIFTI1, "UNITS_MM", 2);
__publicField(_NIFTI1, "UNITS_MICRON", 3);
__publicField(_NIFTI1, "UNITS_SEC", 8);
__publicField(_NIFTI1, "UNITS_MSEC", 16);
__publicField(_NIFTI1, "UNITS_USEC", 24);
__publicField(_NIFTI1, "UNITS_HZ", 32);
__publicField(_NIFTI1, "UNITS_PPM", 40);
__publicField(_NIFTI1, "UNITS_RADS", 48);
// nifti1 codes
__publicField(_NIFTI1, "MAGIC_COOKIE", 348);
__publicField(_NIFTI1, "STANDARD_HEADER_SIZE", 348);
__publicField(_NIFTI1, "MAGIC_NUMBER_LOCATION", 344);
__publicField(_NIFTI1, "MAGIC_NUMBER", [110, 43, 49]);
// n+1 (.nii)
__publicField(_NIFTI1, "MAGIC_NUMBER2", [110, 105, 49]);
// ni1 (.hdr/.img)
__publicField(_NIFTI1, "EXTENSION_HEADER_SIZE", 8);
var NIFTI1 = _NIFTI1;

// node_modules/nifti-reader-js/dist/nifti2.js
var _NIFTI2 = class _NIFTI2 {
  constructor() {
    __publicField(this, "littleEndian", false);
    __publicField(this, "dim_info", 0);
    __publicField(this, "dims", []);
    __publicField(this, "intent_p1", 0);
    __publicField(this, "intent_p2", 0);
    __publicField(this, "intent_p3", 0);
    __publicField(this, "intent_code", 0);
    __publicField(this, "datatypeCode", 0);
    __publicField(this, "numBitsPerVoxel", 0);
    __publicField(this, "slice_start", 0);
    __publicField(this, "slice_end", 0);
    __publicField(this, "slice_code", 0);
    __publicField(this, "pixDims", []);
    __publicField(this, "vox_offset", 0);
    __publicField(this, "scl_slope", 1);
    __publicField(this, "scl_inter", 0);
    __publicField(this, "xyzt_units", 0);
    __publicField(this, "cal_max", 0);
    __publicField(this, "cal_min", 0);
    __publicField(this, "slice_duration", 0);
    __publicField(this, "toffset", 0);
    __publicField(this, "description", "");
    __publicField(this, "aux_file", "");
    __publicField(this, "intent_name", "");
    __publicField(this, "qform_code", 0);
    __publicField(this, "sform_code", 0);
    __publicField(this, "quatern_b", 0);
    __publicField(this, "quatern_c", 0);
    __publicField(this, "quatern_d", 0);
    __publicField(this, "qoffset_x", 0);
    __publicField(this, "qoffset_y", 0);
    __publicField(this, "qoffset_z", 0);
    __publicField(this, "affine", [
      [1, 0, 0, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1]
    ]);
    __publicField(this, "magic", "0");
    __publicField(this, "extensionFlag", [0, 0, 0, 0]);
    __publicField(this, "extensions", []);
    __publicField(this, "extensionSize", 0);
    __publicField(this, "extensionCode", 0);
    /**
     * Returns the byte index of the extension.
     * @returns {number}
     */
    __publicField(this, "getExtensionLocation", function() {
      return _NIFTI2.MAGIC_COOKIE + 4;
    });
    /**
     * Returns the extension size.
     * @param {DataView} data
     * @returns {number}
     */
    __publicField(this, "getExtensionSize", NIFTI1.prototype.getExtensionSize);
    /**
     * Returns the extension code.
     * @param {DataView} data
     * @returns {number}
     */
    __publicField(this, "getExtensionCode", NIFTI1.prototype.getExtensionCode);
    /**
     * Adds an extension
     * @param {NIFTIEXTENSION} extension
     * @param {number} index
     */
    __publicField(this, "addExtension", NIFTI1.prototype.addExtension);
    /**
     * Removes an extension
     * @param {number} index
     */
    __publicField(this, "removeExtension", NIFTI1.prototype.removeExtension);
    /**
     * Returns a human-readable string of datatype.
     * @param {number} code
     * @returns {string}
     */
    __publicField(this, "getDatatypeCodeString", NIFTI1.prototype.getDatatypeCodeString);
    /**
     * Returns a human-readable string of transform type.
     * @param {number} code
     * @returns {string}
     */
    __publicField(this, "getTransformCodeString", NIFTI1.prototype.getTransformCodeString);
    /**
     * Returns a human-readable string of spatial and temporal units.
     * @param {number} code
     * @returns {string}
     */
    __publicField(this, "getUnitsCodeString", NIFTI1.prototype.getUnitsCodeString);
    /**
     * Returns the qform matrix.
     * @returns {Array.<Array.<number>>}
     */
    __publicField(this, "getQformMat", NIFTI1.prototype.getQformMat);
    /**
     * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
     * @param {number} qb
     * @param {number} qc
     * @param {number} qd
     * @param {number} qx
     * @param {number} qy
     * @param {number} qz
     * @param {number} dx
     * @param {number} dy
     * @param {number} dz
     * @param {number} qfac
     * @returns {Array.<Array.<number>>}
     */
    __publicField(this, "convertNiftiQFormToNiftiSForm", NIFTI1.prototype.convertNiftiQFormToNiftiSForm);
    /**
     * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
     * @param {Array.<Array.<number>>} R
     * @returns {string}
     */
    __publicField(this, "convertNiftiSFormToNEMA", NIFTI1.prototype.convertNiftiSFormToNEMA);
    __publicField(this, "nifti_mat33_mul", NIFTI1.prototype.nifti_mat33_mul);
    __publicField(this, "nifti_mat33_determ", NIFTI1.prototype.nifti_mat33_determ);
  }
  // ni2\0
  /*** Prototype Methods ***/
  /**
   * Reads the header data.
   * @param {ArrayBuffer} data
   */
  readHeader(data) {
    var rawData = new DataView(data), magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian), ctr, ctrOut, ctrIn, index, array;
    if (magicCookieVal !== _NIFTI2.MAGIC_COOKIE) {
      this.littleEndian = true;
      magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian);
    }
    if (magicCookieVal !== _NIFTI2.MAGIC_COOKIE) {
      throw new Error("This does not appear to be a NIFTI file!");
    }
    this.magic = Utils.getStringAt(rawData, 4, 12);
    this.datatypeCode = Utils.getShortAt(rawData, 12, this.littleEndian);
    this.numBitsPerVoxel = Utils.getShortAt(rawData, 14, this.littleEndian);
    for (ctr = 0; ctr < 8; ctr += 1) {
      index = 16 + ctr * 8;
      this.dims[ctr] = Utils.getInt64At(rawData, index, this.littleEndian);
    }
    this.intent_p1 = Utils.getDoubleAt(rawData, 80, this.littleEndian);
    this.intent_p2 = Utils.getDoubleAt(rawData, 88, this.littleEndian);
    this.intent_p3 = Utils.getDoubleAt(rawData, 96, this.littleEndian);
    for (ctr = 0; ctr < 8; ctr += 1) {
      index = 104 + ctr * 8;
      this.pixDims[ctr] = Utils.getDoubleAt(rawData, index, this.littleEndian);
    }
    this.vox_offset = Utils.getInt64At(rawData, 168, this.littleEndian);
    this.scl_slope = Utils.getDoubleAt(rawData, 176, this.littleEndian);
    this.scl_inter = Utils.getDoubleAt(rawData, 184, this.littleEndian);
    this.cal_max = Utils.getDoubleAt(rawData, 192, this.littleEndian);
    this.cal_min = Utils.getDoubleAt(rawData, 200, this.littleEndian);
    this.slice_duration = Utils.getDoubleAt(rawData, 208, this.littleEndian);
    this.toffset = Utils.getDoubleAt(rawData, 216, this.littleEndian);
    this.slice_start = Utils.getInt64At(rawData, 224, this.littleEndian);
    this.slice_end = Utils.getInt64At(rawData, 232, this.littleEndian);
    this.description = Utils.getStringAt(rawData, 240, 240 + 80);
    this.aux_file = Utils.getStringAt(rawData, 320, 320 + 24);
    this.qform_code = Utils.getIntAt(rawData, 344, this.littleEndian);
    this.sform_code = Utils.getIntAt(rawData, 348, this.littleEndian);
    this.quatern_b = Utils.getDoubleAt(rawData, 352, this.littleEndian);
    this.quatern_c = Utils.getDoubleAt(rawData, 360, this.littleEndian);
    this.quatern_d = Utils.getDoubleAt(rawData, 368, this.littleEndian);
    this.qoffset_x = Utils.getDoubleAt(rawData, 376, this.littleEndian);
    this.qoffset_y = Utils.getDoubleAt(rawData, 384, this.littleEndian);
    this.qoffset_z = Utils.getDoubleAt(rawData, 392, this.littleEndian);
    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
      for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
        index = 400 + (ctrOut * 4 + ctrIn) * 8;
        this.affine[ctrOut][ctrIn] = Utils.getDoubleAt(rawData, index, this.littleEndian);
      }
    }
    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;
    this.slice_code = Utils.getIntAt(rawData, 496, this.littleEndian);
    this.xyzt_units = Utils.getIntAt(rawData, 500, this.littleEndian);
    this.intent_code = Utils.getIntAt(rawData, 504, this.littleEndian);
    this.intent_name = Utils.getStringAt(rawData, 508, 508 + 16);
    this.dim_info = Utils.getByteAt(rawData, 524);
    if (rawData.byteLength > _NIFTI2.MAGIC_COOKIE) {
      this.extensionFlag[0] = Utils.getByteAt(rawData, 540);
      this.extensionFlag[1] = Utils.getByteAt(rawData, 540 + 1);
      this.extensionFlag[2] = Utils.getByteAt(rawData, 540 + 2);
      this.extensionFlag[3] = Utils.getByteAt(rawData, 540 + 3);
      if (this.extensionFlag[0]) {
        this.extensions = Utils.getExtensionsAt(rawData, this.getExtensionLocation(), this.littleEndian, this.vox_offset);
        this.extensionSize = this.extensions[0].esize;
        this.extensionCode = this.extensions[0].ecode;
      }
    }
  }
  /**
   * Returns a formatted string of header fields.
   * @returns {string}
   */
  toFormattedString() {
    var fmt = Utils.formatNumber, string = "";
    string += "Datatype = " + +this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n";
    string += "Bits Per Voxel =  = " + this.numBitsPerVoxel + "\n";
    string += "Image Dimensions (1-8): " + this.dims[0] + ", " + this.dims[1] + ", " + this.dims[2] + ", " + this.dims[3] + ", " + this.dims[4] + ", " + this.dims[5] + ", " + this.dims[6] + ", " + this.dims[7] + "\n";
    string += "Intent Parameters (1-3): " + this.intent_p1 + ", " + this.intent_p2 + ", " + this.intent_p3 + "\n";
    string += "Voxel Dimensions (1-8): " + fmt(this.pixDims[0]) + ", " + fmt(this.pixDims[1]) + ", " + fmt(this.pixDims[2]) + ", " + fmt(this.pixDims[3]) + ", " + fmt(this.pixDims[4]) + ", " + fmt(this.pixDims[5]) + ", " + fmt(this.pixDims[6]) + ", " + fmt(this.pixDims[7]) + "\n";
    string += "Image Offset = " + this.vox_offset + "\n";
    string += "Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n";
    string += "Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n";
    string += "Slice Duration = " + this.slice_duration + "\n";
    string += "Time Axis Shift = " + this.toffset + "\n";
    string += "Slice Start = " + this.slice_start + "\n";
    string += "Slice End = " + this.slice_end + "\n";
    string += 'Description: "' + this.description + '"\n';
    string += 'Auxiliary File: "' + this.aux_file + '"\n';
    string += "Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n";
    string += "S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n";
    string += "Quaternion Parameters:  b = " + fmt(this.quatern_b) + "  c = " + fmt(this.quatern_c) + "  d = " + fmt(this.quatern_d) + "\n";
    string += "Quaternion Offsets:  x = " + this.qoffset_x + "  y = " + this.qoffset_y + "  z = " + this.qoffset_z + "\n";
    string += "S-Form Parameters X: " + fmt(this.affine[0][0]) + ", " + fmt(this.affine[0][1]) + ", " + fmt(this.affine[0][2]) + ", " + fmt(this.affine[0][3]) + "\n";
    string += "S-Form Parameters Y: " + fmt(this.affine[1][0]) + ", " + fmt(this.affine[1][1]) + ", " + fmt(this.affine[1][2]) + ", " + fmt(this.affine[1][3]) + "\n";
    string += "S-Form Parameters Z: " + fmt(this.affine[2][0]) + ", " + fmt(this.affine[2][1]) + ", " + fmt(this.affine[2][2]) + ", " + fmt(this.affine[2][3]) + "\n";
    string += "Slice Code = " + this.slice_code + "\n";
    string += "Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n";
    string += "Intent Code = " + this.intent_code + "\n";
    string += 'Intent Name: "' + this.intent_name + '"\n';
    string += "Dim Info = " + this.dim_info + "\n";
    return string;
  }
  /**
   * Returns header as ArrayBuffer.
   * @param {boolean} includeExtensions - should extension bytes be included
   * @returns {ArrayBuffer}
   */
  toArrayBuffer(includeExtensions = false) {
    const INT64_SIZE = 8;
    const DOUBLE_SIZE = 8;
    let byteSize = 540 + 4;
    if (includeExtensions) {
      for (let extension of this.extensions) {
        byteSize += extension.esize;
      }
    }
    let byteArray = new Uint8Array(byteSize);
    let view = new DataView(byteArray.buffer);
    view.setInt32(0, 540, this.littleEndian);
    byteArray.set(new TextEncoder().encode(this.magic), 4);
    view.setInt16(12, this.datatypeCode, this.littleEndian);
    view.setInt16(14, this.numBitsPerVoxel, this.littleEndian);
    for (let i = 0; i < 8; i++) {
      view.setBigInt64(16 + INT64_SIZE * i, BigInt(this.dims[i]), this.littleEndian);
    }
    view.setFloat64(80, this.intent_p1, this.littleEndian);
    view.setFloat64(88, this.intent_p2, this.littleEndian);
    view.setFloat64(96, this.intent_p3, this.littleEndian);
    for (let i = 0; i < 8; i++) {
      view.setFloat64(104 + DOUBLE_SIZE * i, this.pixDims[i], this.littleEndian);
    }
    view.setBigInt64(168, BigInt(this.vox_offset), this.littleEndian);
    view.setFloat64(176, this.scl_slope, this.littleEndian);
    view.setFloat64(184, this.scl_inter, this.littleEndian);
    view.setFloat64(192, this.cal_max, this.littleEndian);
    view.setFloat64(200, this.cal_min, this.littleEndian);
    view.setFloat64(208, this.slice_duration, this.littleEndian);
    view.setFloat64(216, this.toffset, this.littleEndian);
    view.setBigInt64(224, BigInt(this.slice_start), this.littleEndian);
    view.setBigInt64(232, BigInt(this.slice_end), this.littleEndian);
    byteArray.set(new TextEncoder().encode(this.description), 240);
    byteArray.set(new TextEncoder().encode(this.aux_file), 320);
    view.setInt32(344, this.qform_code, this.littleEndian);
    view.setInt32(348, this.sform_code, this.littleEndian);
    view.setFloat64(352, this.quatern_b, this.littleEndian);
    view.setFloat64(360, this.quatern_c, this.littleEndian);
    view.setFloat64(368, this.quatern_d, this.littleEndian);
    view.setFloat64(376, this.qoffset_x, this.littleEndian);
    view.setFloat64(384, this.qoffset_y, this.littleEndian);
    view.setFloat64(392, this.qoffset_z, this.littleEndian);
    const flattened = this.affine.flat();
    for (let i = 0; i < 12; i++) {
      view.setFloat64(400 + DOUBLE_SIZE * i, flattened[i], this.littleEndian);
    }
    view.setInt32(496, this.slice_code, this.littleEndian);
    view.setInt32(500, this.xyzt_units, this.littleEndian);
    view.setInt32(504, this.intent_code, this.littleEndian);
    byteArray.set(new TextEncoder().encode(this.intent_name), 508);
    view.setUint8(524, this.dim_info);
    if (includeExtensions) {
      byteArray.set(Uint8Array.from([1, 0, 0, 0]), 540);
      let extensionByteIndex = this.getExtensionLocation();
      for (const extension of this.extensions) {
        view.setInt32(extensionByteIndex, extension.esize, extension.littleEndian);
        view.setInt32(extensionByteIndex + 4, extension.ecode, extension.littleEndian);
        byteArray.set(new Uint8Array(extension.edata), extensionByteIndex + 8);
        extensionByteIndex += extension.esize;
      }
    } else {
      byteArray.set(new Uint8Array(4).fill(0), 540);
    }
    return byteArray.buffer;
  }
};
/*** Static Pseudo-constants ***/
__publicField(_NIFTI2, "MAGIC_COOKIE", 540);
__publicField(_NIFTI2, "MAGIC_NUMBER_LOCATION", 4);
__publicField(_NIFTI2, "MAGIC_NUMBER", [110, 43, 50, 0, 13, 10, 26, 10]);
// n+2\0
__publicField(_NIFTI2, "MAGIC_NUMBER2", [110, 105, 50, 0, 13, 10, 26, 10]);
var NIFTI2 = _NIFTI2;

// node_modules/nifti-reader-js/dist/nifti.js
function isNIFTI1(data, isHdrImgPairOK = false) {
  var buf, mag1, mag2, mag3;
  if (data.byteLength < NIFTI1.STANDARD_HEADER_SIZE) {
    return false;
  }
  buf = new DataView(data);
  if (buf)
    mag1 = buf.getUint8(NIFTI1.MAGIC_NUMBER_LOCATION);
  mag2 = buf.getUint8(NIFTI1.MAGIC_NUMBER_LOCATION + 1);
  mag3 = buf.getUint8(NIFTI1.MAGIC_NUMBER_LOCATION + 2);
  if (isHdrImgPairOK && mag1 === NIFTI1.MAGIC_NUMBER2[0] && mag2 === NIFTI1.MAGIC_NUMBER2[1] && mag3 === NIFTI1.MAGIC_NUMBER2[2])
    return true;
  return !!(mag1 === NIFTI1.MAGIC_NUMBER[0] && mag2 === NIFTI1.MAGIC_NUMBER[1] && mag3 === NIFTI1.MAGIC_NUMBER[2]);
}
function isNIFTI2(data, isHdrImgPairOK = false) {
  var buf, mag1, mag2, mag3;
  if (data.byteLength < NIFTI1.STANDARD_HEADER_SIZE) {
    return false;
  }
  buf = new DataView(data);
  mag1 = buf.getUint8(NIFTI2.MAGIC_NUMBER_LOCATION);
  mag2 = buf.getUint8(NIFTI2.MAGIC_NUMBER_LOCATION + 1);
  mag3 = buf.getUint8(NIFTI2.MAGIC_NUMBER_LOCATION + 2);
  if (isHdrImgPairOK && mag1 === NIFTI2.MAGIC_NUMBER2[0] && mag2 === NIFTI2.MAGIC_NUMBER2[1] && mag3 === NIFTI2.MAGIC_NUMBER2[2])
    return true;
  return !!(mag1 === NIFTI2.MAGIC_NUMBER[0] && mag2 === NIFTI2.MAGIC_NUMBER[1] && mag3 === NIFTI2.MAGIC_NUMBER[2]);
}
function isNIFTI(data, isHdrImgPairOK = false) {
  return isNIFTI1(data, isHdrImgPairOK) || isNIFTI2(data, isHdrImgPairOK);
}
function isCompressed(data) {
  var buf, magicCookie1, magicCookie2;
  if (data) {
    buf = new DataView(data);
    magicCookie1 = buf.getUint8(0);
    magicCookie2 = buf.getUint8(1);
    if (magicCookie1 === Utils.GUNZIP_MAGIC_COOKIE1) {
      return true;
    }
    if (magicCookie2 === Utils.GUNZIP_MAGIC_COOKIE2) {
      return true;
    }
  }
  return false;
}
function decompress(data) {
  return decompressSync(new Uint8Array(data)).buffer;
}
async function decompressAsync(data) {
  const uint8Data = new Uint8Array(data);
  const format = uint8Data[0] === 31 && uint8Data[1] === 139 && uint8Data[2] === 8 ? "gzip" : uint8Data[0] === 120 && (uint8Data[1] === 1 || uint8Data[1] === 94 || uint8Data[1] === 156 || uint8Data[1] === 218) ? "deflate" : "deflate-raw";
  const stream = new DecompressionStream(format);
  const writer = stream.writable.getWriter();
  writer.write(uint8Data).catch(console.error);
  const closePromise = writer.close().catch(console.error);
  const response = new Response(stream.readable);
  const result = await response.arrayBuffer();
  await closePromise;
  return result;
}
async function decompressHeaderAsync(data, minOutputBytes = Infinity) {
  const detectFormat = (data2) => {
    if (data2[0] === 31 && data2[1] === 139 && data2[2] === 8)
      return "gzip";
    if (data2[0] === 120 && [1, 94, 156, 218].includes(data2[1]))
      return "deflate";
    return "deflate-raw";
  };
  const uint8Data = new Uint8Array(data);
  const format = detectFormat(uint8Data);
  const stream = new DecompressionStream(format);
  const limitStream = new TransformStream({
    transform(chunk, controller) {
      controller.enqueue(chunk);
    },
    flush(controller) {
      controller.terminate();
    }
  });
  const { readable, writable } = stream;
  const writer = writable.getWriter();
  const limitedReader = readable.pipeThrough(limitStream).getReader();
  writer.write(uint8Data).catch((err2) => {
    if (!(err2 instanceof Error && err2.name === "AbortError")) {
      console.error("Error during write:", err2);
    }
  });
  const chunks = [];
  let totalBytes = 0;
  try {
    while (totalBytes < minOutputBytes) {
      const { done, value } = await limitedReader.read();
      if (done)
        break;
      const remainingSpace = minOutputBytes - totalBytes;
      const chunk = value.subarray(0, Math.min(value.length, remainingSpace));
      chunks.push(chunk);
      totalBytes += chunk.length;
      if (totalBytes >= minOutputBytes) {
        await Promise.all([
          limitedReader.cancel().catch(() => {
          }),
          writer.abort().catch(() => {
          })
        ]);
        break;
      }
    }
  } catch (err2) {
    if (!(err2 instanceof Error && err2.name === "AbortError")) {
      console.error("Error during decompression:", err2);
    }
  } finally {
    await Promise.allSettled([
      limitedReader.cancel().catch(() => {
      }),
      writer.close().catch(() => {
      })
    ]);
  }
  return chunks.length === 1 ? chunks[0].buffer : chunks.reduce((acc, chunk) => {
    const combined = new Uint8Array(acc.byteLength + chunk.byteLength);
    combined.set(new Uint8Array(acc), 0);
    combined.set(chunk, acc.byteLength);
    return combined.buffer;
  }, new ArrayBuffer(0));
}
function readHeader(data, isHdrImgPairOK = false) {
  let header = null;
  if (isCompressed(data)) {
    data = decompress(data);
  }
  if (isNIFTI1(data, isHdrImgPairOK)) {
    header = new NIFTI1();
  } else if (isNIFTI2(data, isHdrImgPairOK)) {
    header = new NIFTI2();
  }
  if (header) {
    header.readHeader(data);
  } else {
    throw new Error("That file does not appear to be NIFTI!");
  }
  return header;
}
async function readHeaderAsync(data, isHdrImgPairOK = false) {
  if (!isCompressed(data)) {
    return readHeader(data, isHdrImgPairOK);
  }
  let header = null;
  let dat = await decompressHeaderAsync(data, 540);
  let isLitteEndian = true;
  let isVers1 = true;
  var rawData = new DataView(dat);
  const sigLittle = rawData.getInt32(0, true);
  const sigBig = rawData.getInt32(0, false);
  if (sigLittle === 348) {
  } else if (sigBig === 348) {
    isLitteEndian = false;
  } else if (sigLittle === 540) {
    isVers1 = false;
  } else if (sigBig === 540) {
    isVers1 = false;
    isLitteEndian = false;
  } else {
    throw new Error("That file does not appear to be NIFTI!");
  }
  let vox_offset = Math.round(rawData.getFloat32(108, isLitteEndian));
  if (NIFTI2) {
    vox_offset = Utils.getUint64At(rawData, 168, isLitteEndian);
  }
  if (vox_offset > dat.byteLength) {
    dat = await decompressHeaderAsync(data, vox_offset);
  }
  if (isVers1) {
    header = new NIFTI1();
  } else {
    header = new NIFTI2();
  }
  header.readHeader(dat);
  return header;
}
function hasExtension(header) {
  return header.extensionFlag[0] != 0;
}
function readImage(header, data) {
  var imageOffset = header.vox_offset, timeDim = 1, statDim = 1;
  if (header.dims[4]) {
    timeDim = header.dims[4];
  }
  if (header.dims[5]) {
    statDim = header.dims[5];
  }
  var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);
  return data.slice(imageOffset, imageOffset + imageSize);
}
function readExtension(header, data) {
  var loc = header.getExtensionLocation(), size = header.extensionSize;
  return data.slice(loc, loc + size);
}
function readExtensionData(header, data) {
  var loc = header.getExtensionLocation(), size = header.extensionSize;
  return data.slice(loc + 8, loc + size);
}
export {
  NIFTI1,
  NIFTI2,
  NIFTIEXTENSION,
  Utils,
  decompress,
  decompressAsync,
  decompressHeaderAsync,
  hasExtension,
  isCompressed,
  isNIFTI,
  isNIFTI1,
  isNIFTI2,
  readExtension,
  readExtensionData,
  readHeader,
  readHeaderAsync,
  readImage
};
//# sourceMappingURL=nifti-reader-js.js.map
